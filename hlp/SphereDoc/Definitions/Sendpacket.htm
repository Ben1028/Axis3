<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.14.0" />
		<meta name="keywords" content="Sendpacket,De:Sendpacket,En:Sendpacket,Sendpacket,Es:Sendpacket,Fr:Sendpacket,Ja:Sendpacket,Tr:Sendpacket,Wiki Translation" />
		<link rel="alternate" type="application/x-wiki" title="Edit" href="http://wiki.sphere.torfo.org/index.php?title=Sendpacket&amp;action=edit" />
		<link rel="edit" title="Edit" href="http://wiki.sphere.torfo.org/index.php?title=Sendpacket&amp;action=edit" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="SphereWiki (en)" />
		<link rel="alternate" type="application/rss+xml" title="SphereWiki RSS Feed" href="http://wiki.sphere.torfo.org/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="SphereWiki Atom Feed" href="http://wiki.sphere.torfo.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Sendpacket - SphereWiki</title>
		<link rel="stylesheet" href="/skins/common/shared.css?195" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins/common/commonPrint.css?195" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins/monobook/main.css?195" type="text/css" media="screen" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE50Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE55Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins/monobook/IE60Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins/monobook/IE70Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" />
		<link rel="stylesheet" href="/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" media="print" />
		<link rel="stylesheet" href="/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" />
		<link rel="stylesheet" href="/index.php?title=-&amp;action=raw&amp;maxage=18000&amp;smaxage=0&amp;ts=20120630142713&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins/common/IEFixes.js?195"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins";
		var wgArticlePath = "/index.php/$1";
		var wgScriptPath = "";
		var wgScript = "/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://wiki.sphere.torfo.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Sendpacket";
		var wgTitle = "Sendpacket";
		var wgAction = "view";
		var wgArticleId = "29";
		var wgIsArticle = true;
		var wgUserName = "Ben";
		var wgUserGroups = ["*", "user", "autoconfirmed"];
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = "711";
		var wgVersion = "1.14.0";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		var wgAjaxWatch = {"watchMsg": "Watch", "unwatchMsg": "Unwatch", "watchingMsg": "Watching...", "unwatchingMsg": "Unwatching..."};
		/*]]>*/</script>

		<script type="text/javascript" src="/skins/common/wikibits.js?195"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins/common/ajax.js?195"></script>
		<script type="text/javascript" src="/skins/common/ajaxwatch.js?195"></script>
		<script type="text/javascript" src="/index.php?title=-&amp;action=raw&amp;smaxage=0&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Sendpacket skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
				<h1 id="firstHeading" class="firstHeading">Sendpacket</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From SphereWiki</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div style="margin: 0px; padding: 2px 2px 0px 2px; border: none; border-collapse:collapse; clear:both;">
<span style="float:right; font-weight:normal; font-size: x-small;"><a href="/index.php/Wiki_Translation" title="Wiki Translation">Help</a></span><div style="background-color:#e9e9e9; border-style:solid; border-width:1px; border-color:#aaa; padding: 0pt 4pt 8pt 4pt; font-size: 95%; text-align:center;"><b>Available languages</b></div>
<div style="border: 1px solid #aaa; background-color: #f9f9f9; border-collapse:collapse; font-size: 95%; padding: 2pt 4pt 2pt 4pt; margin: 0px;">          • <span lang="en"><strong class="selflink">English</strong></span>                                         
</div>
</div>
<div class="NavFrame" style="border:none; clear:none; margin: 0px; padding-top: 0px;">
<div class="NavHead" style="background-color:#e9e9e9; border-style:solid; border-width:1px; border-color:#aaa; margin: 0px; padding: 0pt 4pt 8pt 4pt; font-size: 95%;"><b>Missing languages</b></div>
<div class="NavContent" style="border: 1px solid #aaa; background-color: #f9f9f9; border-collapse:collapse; font-size: 95%; padding: 2pt 4pt 2pt 4pt;">        • <span lang="de"><a href="/index.php?title=De:Sendpacket&amp;action=edit&amp;redlink=1" class="new" title="De:Sendpacket (page does not exist)">Deutsch</a></span>    • <span lang="es"><a href="/index.php?title=Es:Sendpacket&amp;action=edit&amp;redlink=1" class="new" title="Es:Sendpacket (page does not exist)">Español</a></span>    • <span lang="fr"><a href="/index.php?title=Fr:Sendpacket&amp;action=edit&amp;redlink=1" class="new" title="Fr:Sendpacket (page does not exist)">Français</a></span>           • <span lang="ja"><a href="/index.php?title=Ja:Sendpacket&amp;action=edit&amp;redlink=1" class="new" title="Ja:Sendpacket (page does not exist)">日本語</a></span>                  • <span lang="tr"><a href="/index.php?title=Tr:Sendpacket&amp;action=edit&amp;redlink=1" class="new" title="Tr:Sendpacket (page does not exist)">Türkçe</a></span>     
</div>
</div><div class="NavFrame" style="border:none;display:none;"></div>
<p><br />
<i>Sendpacket</i><br />
<i>By Taran</i>
</p><p><br />
One of the coolest new features that has arrived with the 56-series versions of SPHERE is the SENDPACKET command. This command allows us to directly send streams of data to the client. To those of us who know a bit about programming, this is probably one of the coolest features they've implemented in a long time. Let's start from the beginning. 
</p><p><br />
UO is obviously an online game. Everyone knows this, considering it's in the name, "Ultima Online." However, I don't know that many people actually know how an online game works. Well, first we need to talk a bit about networking and protocols. UO uses what's known as a client-server protocol to accomplish its goal. In networking, a client is a program which connects to a server somewhere else on the internet. A server is a program which allows clients to connect and processes data it receives. Many times, the server will also send data back to the client in response to the client's messages. This is known as "serving information," which is how those types of programs acquired their name. 
</p><p><br />
Servers and clients must speak a common language. If they did not, it would be like a person speaking English trying to communicate with a person who only speaks French or Chinese or Russian. For example, if you try to connect to a mail server with your UO client, the two programs will not be able to communicate. The language spoken by the mail server is different than the language spoken by your UO client. In the computer world, a language spoken between two programs is called a protocol. We use protocols every day without realizing it. When you request a website, your web browser speaks HTTP (Hypertext Transfer Protocol) with a web server somewhere. Some people may have used an FTP (File Transfer Protocol) program to upload and download files from a remote computer. When you send mail, you are communicating using SMTP (Simple Mail Transfer Protocol) with the mail server. When you receive mail, you're probably using POP3 (Post Office Protocol, version 3). In fact, all messages sent across the internet have their own protocols, such as TCP/IP (Transmission Control Protocol/Internet Protocol) or UDP (User Datagram Protocol). 
</p><p><br />
UDP is used by many online FPS games, like Quake and Unreal Tournament. The advantage of UDP is that it's fast, and that you don't have to maintain a connection. However, for whatever reason, the people at Origin (the company that developed UO) decided that they were going to use the TCP/IP protocol instead. This means that there is a constant connection over the internet between your client and someone else's UO server. Or, if you run a server, there are many clients with constant connections to your server. If you want to see how many TCP/IP connections your computer is currently maintaining, go to a command prompt in Windows or Unix and type "netstat". 
</p><p><br />
Some protocols (such as HTTP and SMTP) were designed so that humans could easily emulate them. For example, if you connect using a simple telnet client to a mail server, you can type the same commands that your mail program would send, and the mail would be sent exactly as though you used Netscape or Outlook to send it. A sample communication with a mail server might look something like the following: 
</p><p><br />
</p>
<pre style="font-family: monospace; border: none;">HELO
220 Hello!  I'm rit.edu!  Pleased to meet you!
MAIL FROM:&lt;joe@joesmail.com&gt;
250 Email address accepted
RCPT TO:&lt;joesfriend@joesmail.com&gt;
250 Recipient address accepted
DATA
250 Okay, end with &lt;CRLF&gt;.&lt;CRLF&gt;
Subject: Hello!

This is a test email.
.
</pre>
<p><br />
As you can see, any person reading this transmission would know exactly what was happening. The SMTP protocol is what we call a plain-text protocol. It uses normal English words, and responds as though it's talking to a person. The protocol used by the UO server/client (UOP) is slightly different. It is sent as a simple stream of data which no one could understand unless they knew how to interpret it. However, to help the client and server do their jobs better, Origin decided that it would be best to use clumps of data to send commands back and forth. One "clump" of data that describes one of those EFFECT command animations might contain the following information:
</p>
<ul><li> That this command tells the client how to display an effect 
</li><li> Which type of effect we're using 
</li><li> Which item is used in the effect 
</li><li> Who is the source of the effect? 
</li><li> Who is the destination of the effect? 
</li><li> Should the effect change direction to follow the target? 
</li><li> Should the effect explode when it hits the target? 
</li><li> What color is the effect? 
</li><li> Is the effect transparent? 
</li><li> ... Many more things ... 
</li></ul>
<p><br />
A clump of data describing the local light level to a player probably contains much less information: 
</p>
<ul><li> That this command is telling the client about the local light level 
</li><li> The player in question 
</li><li> The light level 
</li></ul>
<p><br />
So, each clump of data has a few things in common. Each performs exactly one function (displaying an item, displaying an effect, displaying a character, changing the light level). Each clump is capable of identifying itself to the client, and each clump contains a bit of additional information as necessary. These bits of data have a name. In the world of programming, we'd call these clumps of data "packets." A packet is simply a collection of data that is sent as part of a protocol between two computers. In the case of UO, these packets tell the server and the client what the other is doing. There are packets for anything and everything you can do in the game, from using a skill to displaying your radar to opening a container. Even the process of logging in and out require the use of special packets. 
</p><p><br />
You can find a list of these packets <a href="http://jerrith.com/projects/JUOPackets.doc" class="external text" title="http://jerrith.com/projects/JUOPackets.doc" rel="nofollow">here</a>. That link will take you directly to Jerrith's UO Packets Guide, the most well-known guide to UO packets on the Internet. You can find it on many sites other than the one I've linked. 
</p><p><br />
After reading over that list, you're either very confused or very enlightened. You now know that when you do something in the game, the client will send a packet to the server informing it of your actions. You also know that the server sends a lot of packets to the client telling it to display certain things (items, characters, etc) or to perform certain actions (change the light level). Other packets are simply a response to an information request. When you open your status window, your client sends a packet to the server, which asks it for your character information. The server replies with a different packet, detailing your character's strength, dexterity, intelligence, and all of the other vital information for that status window. 
</p><p><br />
You may also notice references to bytes and lengths and sizes in that packet guide. We're going to have to introduce another new concept here. All computers think in a numbering system known as binary. The binary numbering system consists of only 2 digits (0/1). When a computer sends data to another computer over a network, the data is also sent in binary. Instead of sending letters and numbers, it sends a long string of zeros and ones. When you store music or images or programs on your computer, they are stored on your hard drive not as those things, but as long strings of zeros and ones. The advantage of doing this is that it's convenient for the hardware. Hardware that works with zeros and ones to perform a task is known as digital hardware. Tasks performed on those zeros and ones are digital logic. When we talk about those zeros and ones, we refer to them as bits (which is a contraction of "binary digit"). 
</p><p><br />
In binary, each bit represents a power of two. Just like in our base-10 (decimal) system that we use every day, each digit represents a power of ten. The number 1564 can be represented as the sum of powers of ten. For example: 
</p><p><br />
</p>
<pre style="font-family: monospace; border: none;">1564 = 1*1000 + 5*100 + 6*10 + 4*1

1000 = 10 ^ 3

100 = 10 ^ 2

10 = 10 ^ 1

1 = 10 ^ 0
</pre>
<p><br />
In the same way, a binary number can represent any number by using powers of two. Here's a short table of some bytes in binary and how they can be expanded into powers of two. If you would add and multiply those expressions, you would find that they add up to a decimal number. This means that for every decimal number, there is a number to match in binary. In fact, any number can be represented in ANY number base, without changing the value of the number. Certainly, you'll change what it looks like to a human, but you won't change the actual numeric value of the number.
</p><p><br />
</p>
<table border="1">
<tr>
<td> 10010101 </td><td> 1 * 2 7 + 0 * 2 6 + 0 * 2 5 + 1 * 2 4 + 0 * 2 3 + 1 * 2 2 + 0 * 2 1 + 1 * 2 0
</td></tr>
<tr>
<td> 10011100 </td><td> 1 * 2 7 + 0 * 2 6 + 0 * 2 5 + 1 * 2 4 + 1 * 2 3 + 1 * 2 2 + 0 * 2 1 + 0 * 2 0
</td></tr>
<tr>
<td> 00100011 </td><td> 0 * 2 7 + 0 * 2 6 + 1 * 2 5 + 0 * 2 4 + 0 * 2 3 + 0 * 2 2 + 1 * 2 1 + 1 * 2 0
</td></tr>
<tr>
<td> 01000101 </td><td> 0 * 2 7 + 1 * 2 6 + 0 * 2 5 + 0 * 2 4 + 0 * 2 3 + 1 * 2 2 + 0 * 2 1 + 1 * 2 0
</td></tr>
<tr>
<td> 00000011 </td><td> 0 * 2 7 + 0 * 2 6 + 0 * 2 5 + 0 * 2 4 + 0 * 2 3 + 0 * 2 2 + 1 * 2 1 + 1 * 2 0
</td></tr></table>
<p><br />
So, as you can see, powers of two are very important to the computer and to the computer programmer. So, when someone decided that we needed to make groupings of bits (similar to the way that we have groupings called hundreds and thousands in the decimal system), they decided they were going to use powers of two to group them. The smallest grouping of bits is called a nibble. A nibble is equal to exactly 4 binary digits. For example, 1001 and 0001 are nibbles, but 0001010 consists of more than one nibble. Can you spot them? You're right, the two nibbles in 0001010 are 0000 and 1010. Adding a zero to the front of a binary number does not change its value. 
</p><p><br />
The second and most important division of binary numbers is called the byte. A byte is exactly 8 bits and is the basic unit of storage on any sort of device. Your computer probably uses gigabytes, megabytes, and kilobytes on a regular basis. You probably know from school that the prefix "kilo" usually means 1000. For example, a kilometer is exactly 1000 meters. However, in keeping with our practice of using powers of 2, the people who invented the computer decided that one kilobyte should be 1024 (2 10 ) bytes. A megabyte is exactly 1024 kilobytes, which means that one megabyte is equal to 1048576 (1024 2 )bytes. A gigabyte is equal to 1024 megabytes, so one gigabyte is equal to 1073741824 (1024 3 ) bytes. Transforming these numbers into binary brings us to the not-so-surprising realization that the two larger numbers are also powers of 2. (If you think about it, you'll also realize that RAM comes in quantities of 32 MB, 64 MB, 128 MB, 256 MB, 512 MB, and 1024 MB. Each of those numbers is, of course, a power of two.) 
</p><p><br />
However, we're not going to be using anything close to even a kilobyte when we play with packets. The vast majority of computers store numbers in one of three sizes: 1 byte, 2 bytes (a word), or 4 bytes (a double word, or dword). You will, of course, notice that 1, 2 and 4 are powers of two. In fact, data is almost never stored in 3 bytes or 5 bytes. Sometimes it's stored in 8 bytes, which is the next power of two after 4. Later, I might refer to these numbers using their bit equivalences. 1 byte is 8 bits, 2 bytes is 16 bites, and 4 bytes is 32 bits. 
</p><p><br />
(Sidenote: The fact that 2 bytes is 16 bits and 4 bytes is 32 bits is also important in computing. The 32 in "Win32" or "FAT32" is the same number that appears in the phrase "32-bit." The reason for this is far too complicated for this tutorial, but it deals with the fact that memory is now represented by one 32-bit, or four byte, number instead of two 16-bit, or two byte, numbers.) 
</p><p><br />
Now, Jerrith's packet guide might make a bit more sense when it's referring to certain numbers of bytes and bits. Let's look at an example packet from the guide: 
</p><p><br />
<b>0x05 Packet</b><br />
<b>Attack Request (5 bytes)</b><br />
<br />
</p>
<ul><li> <b>BYTE cmd </b>
</li><li> <b>BYTE[4] ID to be attacked</b>
</li></ul>
<p><br />
The first two lines tell us the number of the packet and a short description. Sometimes these descriptions are a bit cryptic, but I chose this one because it's obvious. This packet is sent to the server by the client when the player double-clicks on someone in war mode. It is actually requesting permission from the server to attack something on the screen. The next lines are the actual data that must be sent with this packet. The first bulleted line tells us that we need to send a piece of data that is 1 byte long. This data must represent the command we're sending. In the last line, BYTE[4] means that value should be represented using 4 bytes. If you look at a UID in the game, you'll find that it is indeed represented by exactly 4 bytes. Also, when you see a number preceded by 0x, such as 0x4A, it means that number is in hexadecimal. The SPHERE equivalent is 04A. 
</p><p><br />
Generally packets have this format. The first byte of any packet is the ID of that packet. So in our case, the first byte is going to contain the number 05. The four bytes following that one are going to be the UID of the character that's being attacked. The client knows the UIDs of characters on the client's display as well as the server, and can inform the server which character is being attacked by the player. 
</p><p><br />
Now, finally, we reach the formatting of the SENDPACKET command. It's a bit confusing and very different than anything you've seen before. 
</p><p><br />
<b>SENDPACKET</b><br />
</p><p><b>Type:</b> Client Function<br />
</p><p><b>Usage:</b> SENDPACKET &lt;bytes in hexadecimal&gt;<br />
</p><p><b>Description:</b> The SENDPACKET function sends the bytes specified exactly as-is to the client. If the client isn't expecting that command, or the command is not formed correctly, the client WILL crash. All SENDPACKET strings must therefore be perfectly formed and expected. 
</p><p><b>Example:</b><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">SENDPACKET 05 040 00 010 011
// Sends an attack request (in the wrong direction) to attack player with UID 040001011
</pre>
<p><br />
You'll notice that the bytes must be represented in hexadecimal. 1 byte is exactly 2 hexadecimal digits. (In the example above, those bytes are 05 40 00 10 11.) This is not difficult. Most numbers in UO are already represented in hexadecimal when displayed. However, just to be sure, you can force a number to display in hex by using the HVAL function: &lt;HVAL &lt;number&gt;&gt; 
</p><p><br />
The real problem arises when we realize that the SENDPACKET function treats each number as a single byte, but most of our numbers are displayed as longer numbers. A UID is diaplyed as 040001011, not 040 000 010 011. In the past we had to create the most hieous function I've ever seen to take care of this problem, but now we can actually prefix each number with a character that identifies how many bytes a number should fill. These prefixes are B (1 byte), W (word, 2 bytes) and D (dword, 4 bytes). Our example above could be rewritten to become:
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">SENDPACKET 05 D040001011
// Sends an attack request (in the wrong direction) to attack player with UID 040001011
</pre>
<p><br />
This tells Sphere that the number 040001011 is a DWORD value and should fill 4 bytes. The same thing works with smaller number, <tt>D01</tt> would be  the same as writing <tt>00 00 00 01</tt>.
</p><p><br />
So, finally, we have all of the tools we need to use SENDPACKET successfully! Scroll up and see how far we've come. Don't get lost. When you return, we'll take a look at a script that alters the personal light level of a player (like nightsight) without altering the base light level. It turns out that there's actually a separate packet for personal light and global light.
</p><p><br />
<b>0x4E Packet</b><br />
<b>Personal Light Level (6 bytes)</b><br />
<br />
</p>
<ul><li> <b>BYTE cmd</b>
</li><li> <b>BYTE[4] creature id</b>
</li><li> <b>BYTE level</b>
</li></ul>
<p><br />
We've got three parameters we need to provide here. We need a one-byte command ID (04E in this case), a 4-byte creature id (the UID of the person whose light level we're changing), and a one-byte level. So, let's form the SENDPACKET command: 
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[FUNCTION change_light_level]
// Usage:  change_light_level lightlevel
SENDPACKET 04E D&lt;UID&gt; &lt;ARGV[0]&gt;
</pre>
<p><br />
That isn't very hard, is it? The first byte is 04E, which is the command ID. The second 4 bytes are provided by prefixing the UID with a "D", and they represent the UID of the person whose light level we are changing. The last byte is given in the argument to the function. Don't worry too much about what happens if the value of ARGV[0] does not fit into a single byte (e.g. 010292). Since we did not prefix the value with a W or D, Sphere will assume that the value is intended to be a single byte and will treat it as such, although obviously the value 010292 won't fit into a byte so the value will be something else completely. If you're worried about invalid values being passed into the function then you should add some form of validation (for example, <tt>IF (&lt;ARGV[0]&amp;gt&gt; &lt; 30</tt>).
</p><p><br />
That was easy, wasn't it? Now let's look at a more complicated function, written by Acratia and altered to use Sphere's W and D prefixes:
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[FUNCTION huedeffect]
// Usage: huedeffect type,itemid,speed,frames,explode,hue,rendermode
SERV.ALLCLIENTS SENDPACKET 0C0 &lt;ARGV[0]&gt; D&lt;SRC.UID&gt; D&lt;UID&gt; W&lt;ARGV[1]&gt; W&lt;SRC.P.X&gt; W&lt;SRC.P.Y&gt; &lt;SRC.P.Z&gt; W&lt;P.X&gt; W&lt;P.Y&gt; &lt;P.Z&gt; &lt;ARGV[2]&gt; &lt;ARGV[3]&gt; 00 00 00 &lt;ARGV[4]&gt; D&lt;ARGV[5]&gt; D&lt;ARGV[6]&gt;
</pre>
<p><br />
We see here that this command requires a lot of information, which explains the long script. Actually, the best idea would be to break the script down into its constituent pieces. You'll see that each piece corresponds to a part of the packet description.
</p><p><br />
</p>
<table cellpadding="4">
<tr>
<td> <b>Data</b>             </td><td> <b>Length</b>  </td><td> <b>Description</b>
</td></tr>
<tr>
<td> 0C0              </td><td> 1 byte  </td><td> The command ID
</td></tr>
<tr>
<td> &lt;ARGV[0]&gt;  </td><td> 1 byte  </td><td> The first argument, which is a one-byte EFFECT type
</td></tr>
<tr>
<td> D&lt;SRC.UID&gt; </td><td> 4 bytes </td><td> The UID of the source of the effect
</td></tr>
<tr>
<td> D&lt;UID&gt;     </td><td> 4 bytes </td><td> The UID of the target of the effect
</td></tr>
<tr>
<td> W&lt;ARGV[1]&gt; </td><td> 2 bytes </td><td> The ID of the item to display as the effect
</td></tr>
<tr>
<td> W&lt;SRC.P.X&gt; </td><td> 2 bytes </td><td> The X coordinate of the source
</td></tr>
<tr>
<td> W&lt;SRC.P.Y&gt; </td><td> 2 bytes </td><td> The Y coordinate of the source
</td></tr>
<tr>
<td> &lt;SRC.P.Z&gt;  </td><td> 1 byte  </td><td> The Z coordinate of the source
</td></tr>
<tr>
<td> W&lt;P.X&gt;     </td><td> 2 bytes </td><td> The X coordinate of the destination
</td></tr>
<tr>
<td> W&lt;P.Y&gt;     </td><td> 2 bytes </td><td> The Y coordinate of the destination
</td></tr>
<tr>
<td> &lt;P.Z&gt;      </td><td> 1 byte  </td><td> The Z coordinate of the destination
</td></tr>
<tr>
<td> &lt;ARGV[2]&gt;  </td><td> 1 byte  </td><td> The speed of the effect (if it's flying)
</td></tr>
<tr>
<td> &lt;ARGV[3]&gt;  </td><td> 1 byte  </td><td> The duration of the effect (in animation frames)
</td></tr>
<tr>
<td> 00 00      </td><td> 2 bytes </td><td> This is marked in the packet guide as "unknown."  Usually, if something is unknown, it's safe to leave it as 0, so we put two 0 bytes here.  It would also be safe to do this: <tt>W00</tt>
</td></tr>
<tr>
<td> 00         </td><td> 1 byte  </td><td> Fixed direction.  I'm not sure what this means, but we're going to set it to zero since we're not sure.  It does not adversely affect the script.
</td></tr>
<tr>
<td> &lt;ARGV[4]&gt;  </td><td> 1 byte  </td><td> Explosion.  This should either be a 1 or a 0, depending on if you want an explosion or not.
</td></tr>
<tr>
<td> D&lt;ARGV[5]&gt; </td><td> 4 bytes </td><td> The hue of the effect.  I wasn't aware that hues were 4 bytes, but apparently they are.  That's odd, because SPHERE represents colors as 2 bytes. Anyway, the D prefix doesn't care how many bytes you give it. You're getting four in the return value, no matter what.
</td></tr>
<tr>
<td> D&lt;ARGV[6]&gt; </td><td> 4 bytes </td><td> Change the seventh argument into a 4-byte number.
</td></tr></table>
<p><br />
Interestingly enough, this "render mode" number determines transparency or fading of effects. This could lead to some fun things. 
</p><p><br />
See? After we split it into its constituent parts, it isn't very difficult at all. In fact, the only thing that remains a mystery is the fact that we're using SERV.ALLCLIENTS with this command. That's simple when you think about it as well. The only people who will see this effect are those who receive the packet. Therefore, if we want everyone in the area to see the effect, we need to send everyone the packet. The only way to be absolutely certain that everyone in an area receives a packet is to send it to the entire server. Certainly, it'll increase lag by an infinitesimal amount to send 36 bytes to 200 players, but that's the price you pay for colored effects. 
</p><p><br />
And that's about it for sending packets. Maybe later I'll post a way to divide a string up into packets, unless one of the other gurus gets there first. SENDPACKET is actually very simple. However, it does have a few limitations: 
</p><p><br />
It can't do anything for which there is no packet. This one should seem obvious. An example is an idea that proposed coloring tilepics in gumps. The client simply doesn't support that, so we can't do it. It can't do anything that requires two-way communication. For example, you could send a dialog to the client using a very very long SENDPACKET, but the server won't be expecting a response, and you won't be able to handle events in your dialog. It could become very laggy if you send a lot of huge packets to a lot of players. Different clients support different packets. I believe that the hued effects are relatively new, so older clients like 2.0.0 or 1.26.4 may not support them. Clients greater than about 2.0.7 should support all packets listed in the Guide. And that's it. Easy, right? &nbsp;:)
</p>
<!-- 
NewPP limit report
Preprocessor node count: 295/1000000
Post-expand include size: 3378/2097152 bytes
Template argument size: 625/2097152 bytes
Expensive parser function count: 8/100
-->

<!-- Saved in parser cache with key d00b020c:pcache:idhash:29-0!1!0!!en!2 and timestamp 20120714140307 -->
<div class="printfooter">
Retrieved from "<a href="http://wiki.sphere.torfo.org/index.php/Sendpacket">http://wiki.sphere.torfo.org/index.php/Sendpacket</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/index.php/Special:Categories" title="Special:Categories">Category</a>:&#32;<span dir='ltr'><a href="/index.php/Category:Articles" title="Category:Articles">Articles</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/index.php/Sendpacket" title="View the content page [c]" accesskey="c">Page</a></li>
				 <li id="ca-talk" class="new"><a href="/index.php?title=Talk:Sendpacket&amp;action=edit&amp;redlink=1" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/index.php?title=Sendpacket&amp;action=edit" title="You can edit this page.&#10;Please use the preview button before saving [e]" accesskey="e">Edit</a></li>
				 <li id="ca-history"><a href="/index.php?title=Sendpacket&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>
				 <li id="ca-move"><a href="/index.php/Special:MovePage/Sendpacket" title="Move this page [m]" accesskey="m">Move</a></li>
				 <li id="ca-watch"><a href="/index.php?title=Sendpacket&amp;action=watch" title="Add this page to your watchlist [w]" accesskey="w">Watch</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-userpage"><a href="/index.php/User:Ben" title="Your user page [.]" accesskey="." class="new">Ben</a></li>
				<li id="pt-mytalk"><a href="/index.php/User_talk:Ben" title="Your talk page [n]" accesskey="n" class="new">My talk</a></li>
				<li id="pt-preferences"><a href="/index.php/Special:Preferences" title="Your preferences">My preferences</a></li>
				<li id="pt-watchlist"><a href="/index.php/Special:Watchlist" title="The list of pages you are monitoring for changes [l]" accesskey="l">My watchlist</a></li>
				<li id="pt-mycontris"><a href="/index.php/Special:Contributions/Ben" title="List of your contributions [y]" accesskey="y">My contributions</a></li>
				<li id="pt-logout"><a href="/index.php?title=Special:UserLogout&amp;returnto=Sendpacket" title="Log out">Log out</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://wiki.sphere.torfo.org/images/SphereWiki.png);" href="/index.php/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/index.php/Special:Search" id="searchform"><div>
				<input id="searchInput" name="search" type="text" title="Search SphereWiki [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search the pages for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/index.php/Main_Page">Main Page</a></li>
				<li id="n-recentchanges"><a href="/index.php/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-randompage"><a href="/index.php/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
				<li id="n-SphereServer-Forum"><a href="http://www.sphereserver.net">SphereServer Forum</a></li>
				<li id="n-help"><a href="/index.php/Help:Contents" title="The place to find out">Help</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-Setting_Up_Sphere'>
		<h5>Setting Up Sphere</h5>
		<div class='pBody'>
			<ul>
				<li id="n-Where-To-Get-Sphere"><a href="/index.php/Where_to_get_Sphere">Where To Get Sphere</a></li>
				<li id="n-Installing-Sphere"><a href="/index.php/Installing_Sphere">Installing Sphere</a></li>
				<li id="n-Configuring-Sphere.ini"><a href="/index.php/Configuring_Sphere.ini">Configuring Sphere.ini</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-Reference_Compendium'>
		<h5>Reference Compendium</h5>
		<div class='pBody'>
			<ul>
				<li id="n-Definitions"><a href="/index.php/Category:Definitions">Definitions</a></li>
				<li id="n-Objects"><a href="/index.php/Category:Objects">Objects</a></li>
				<li id="n-Scripts"><a href="/index.php/Category:Scripts">Scripts</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-Tutorial_Chapters'>
		<h5>Tutorial Chapters</h5>
		<div class='pBody'>
			<ul>
				<li id="n-Chapter-One"><a href="/index.php/Chapter_1">Chapter One</a></li>
				<li id="n-Chapter-Two"><a href="/index.php/Chapter_2">Chapter Two</a></li>
				<li id="n-Chapter-Three"><a href="/index.php/Chapter_3">Chapter Three</a></li>
				<li id="n-Chapter-Four"><a href="/index.php/Chapter_4">Chapter Four</a></li>
				<li id="n-Chapter-Five"><a href="/index.php/Chapter_5">Chapter Five</a></li>
				<li id="n-Chapter-Six"><a href="/index.php/Chapter_6">Chapter Six</a></li>
				<li id="n-Chapter-Seven"><a href="/index.php/Chapter_7">Chapter Seven</a></li>
				<li id="n-Chapter-Eight"><a href="/index.php/Chapter_8">Chapter Eight</a></li>
				<li id="n-Chapter-Nine"><a href="/index.php/Chapter_9">Chapter Nine</a></li>
				<li id="n-Chapter-Ten"><a href="/index.php/Chapter_10">Chapter Ten</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/index.php/Special:WhatLinksHere/Sendpacket" title="List of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/index.php/Special:RecentChangesLinked/Sendpacket" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-specialpages"><a href="/index.php/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/index.php?title=Sendpacket&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/index.php?title=Sendpacket&amp;oldid=711" title="Permanent link to this version of the page">Permanent link</a></li>			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 26 November 2010, at 16:38.</li>
					<li id="viewcount">This page has been accessed 2,127 times.</li>
					<li id="privacy"><a href="/index.php/SphereWiki:Privacy_policy" title="SphereWiki:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/index.php/SphereWiki:About" title="SphereWiki:About">About SphereWiki</a></li>
					<li id="disclaimer"><a href="/index.php/SphereWiki:General_disclaimer" title="SphereWiki:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Piwik -->
<script type="text/javascript">
var pkBaseURL = (("https:" == document.location.protocol) ? "https://sphere.torfo.org/piwik/" : "http://sphere.torfo.org/piwik/");
document.write(unescape("%3Cscript src='" + pkBaseURL + "piwik.js' type='text/javascript'%3E%3C/script%3E"));
</script><script type="text/javascript">
try {
var piwikTracker = Piwik.getTracker(pkBaseURL + "piwik.php", 4);
piwikTracker.trackPageView();
piwikTracker.enableLinkTracking();
} catch( err ) {}
</script>
<!-- End Piwik Tag -->
<!-- Served in 0.523 secs. --></body></html>
