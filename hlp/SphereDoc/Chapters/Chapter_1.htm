<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.14.0" />
		<meta name="keywords" content="Chapter 1,De:Chapter 1,En:Chapter 1,Chapter 1,Es:Chapter 1,Fr:Chapter 1,Ja:Chapter 1,Tr:Chapter 1,Chapter 2,Wiki Translation" />
		<link rel="alternate" type="application/x-wiki" title="Edit" href="http://wiki.sphere.torfo.org/index.php?title=Chapter_1&amp;action=edit" />
		<link rel="edit" title="Edit" href="http://wiki.sphere.torfo.org/index.php?title=Chapter_1&amp;action=edit" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="SphereWiki (en)" />
		<link rel="alternate" type="application/rss+xml" title="SphereWiki RSS Feed" href="http://wiki.sphere.torfo.org/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="SphereWiki Atom Feed" href="http://wiki.sphere.torfo.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Chapter 1 - SphereWiki</title>
		<link rel="stylesheet" href="/skins/common/shared.css?195" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins/common/commonPrint.css?195" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins/monobook/main.css?195" type="text/css" media="screen" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE50Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE55Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins/monobook/IE60Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins/monobook/IE70Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" />
		<link rel="stylesheet" href="/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" media="print" />
		<link rel="stylesheet" href="/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" />
		<link rel="stylesheet" href="/index.php?title=-&amp;action=raw&amp;maxage=18000&amp;smaxage=0&amp;ts=20120630142713&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins/common/IEFixes.js?195"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins";
		var wgArticlePath = "/index.php/$1";
		var wgScriptPath = "";
		var wgScript = "/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://wiki.sphere.torfo.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Chapter_1";
		var wgTitle = "Chapter 1";
		var wgAction = "view";
		var wgArticleId = "2";
		var wgIsArticle = true;
		var wgUserName = "Ben";
		var wgUserGroups = ["*", "user", "autoconfirmed"];
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = "789";
		var wgVersion = "1.14.0";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		var wgAjaxWatch = {"watchMsg": "Watch", "unwatchMsg": "Unwatch", "watchingMsg": "Watching...", "unwatchingMsg": "Unwatching..."};
		/*]]>*/</script>

		<script type="text/javascript" src="/skins/common/wikibits.js?195"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins/common/ajax.js?195"></script>
		<script type="text/javascript" src="/skins/common/ajaxwatch.js?195"></script>
		<script type="text/javascript" src="/index.php?title=-&amp;action=raw&amp;smaxage=0&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Chapter_1 skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
				<h1 id="firstHeading" class="firstHeading">Chapter 1</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From SphereWiki</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div style="margin: 0px; padding: 2px 2px 0px 2px; border: none; border-collapse:collapse; clear:both;">
<span style="float:right; font-weight:normal; font-size: x-small;"><a href="/index.php/Wiki_Translation" title="Wiki Translation">Help</a></span><div style="background-color:#e9e9e9; border-style:solid; border-width:1px; border-color:#aaa; padding: 0pt 4pt 8pt 4pt; font-size: 95%; text-align:center;"><b>Available languages</b></div>
<div style="border: 1px solid #aaa; background-color: #f9f9f9; border-collapse:collapse; font-size: 95%; padding: 2pt 4pt 2pt 4pt; margin: 0px;">        • <span lang="de"><a href="/index.php/De:Chapter_1" title="De:Chapter 1">Deutsch</a></span>  • <span lang="en"><strong class="selflink">English</strong></span>  • <span lang="es"><a href="/index.php/Es:Chapter_1" title="Es:Chapter 1">Español</a></span>                                       
</div>
</div>
<div class="NavFrame" style="border:none; clear:none; margin: 0px; padding-top: 0px;">
<div class="NavHead" style="background-color:#e9e9e9; border-style:solid; border-width:1px; border-color:#aaa; margin: 0px; padding: 0pt 4pt 8pt 4pt; font-size: 95%;"><b>Missing languages</b></div>
<div class="NavContent" style="border: 1px solid #aaa; background-color: #f9f9f9; border-collapse:collapse; font-size: 95%; padding: 2pt 4pt 2pt 4pt;">                • <span lang="fr"><a href="/index.php?title=Fr:Chapter_1&amp;action=edit&amp;redlink=1" class="new" title="Fr:Chapter 1 (page does not exist)">Français</a></span>           • <span lang="ja"><a href="/index.php?title=Ja:Chapter_1&amp;action=edit&amp;redlink=1" class="new" title="Ja:Chapter 1 (page does not exist)">日本語</a></span>                  • <span lang="tr"><a href="/index.php?title=Tr:Chapter_1&amp;action=edit&amp;redlink=1" class="new" title="Tr:Chapter 1 (page does not exist)">Türkçe</a></span>     
</div>
</div><div class="NavFrame" style="border:none;display:none;"></div>
<p><br />
</p>
<table id="toc" class="toc" summary="Contents"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Numbers"><span class="tocnumber">1</span> <span class="toctext">Numbers</span></a></li>
<li class="toclevel-1"><a href="#Defnames"><span class="tocnumber">2</span> <span class="toctext">Defnames</span></a></li>
<li class="toclevel-1"><a href="#ITEMDEF"><span class="tocnumber">3</span> <span class="toctext">ITEMDEF</span></a></li>
<li class="toclevel-1"><a href="#CHARDEF"><span class="tocnumber">4</span> <span class="toctext">CHARDEF</span></a></li>
<li class="toclevel-1"><a href="#TEMPLATE"><span class="tocnumber">5</span> <span class="toctext">TEMPLATE</span></a></li>
<li class="toclevel-1"><a href="#Examples"><span class="tocnumber">6</span> <span class="toctext">Examples</span></a></li>
</ul>
</td></tr></table><script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
<a name="Numbers" id="Numbers"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_1&amp;action=edit&amp;section=1" title="Edit section: Numbers">edit</a>]</span> <span class="mw-headline">Numbers</span></h2>
<p>The first thing you'll notice while looking through SPHERE scripts is the wide variety of ways to write numbers. Since numbers are insanely important to a SPHERE scripter, this is the first lesson in the series. By the end of the lesson, I hope that you have a general understanding of hexadecimal, decimal and binary numbering systems, and SPHERE's ways of identifying each. You will also know how to generate random numbers either from a series or from a list of choices.
</p><p><br />
The first thing you need to understand is that the way we count is not the only way to count. Our numbering system contains ten digits (0, 1, 2, 3, 4, 5, 6, 7, 8, and 9). Therefore, at the tenth number, we have to add an extra column to the number, and reset the first column to zero (1, 2, 3, 4, 5, 6, 7, 8, 9, 10). That's why our numbering system works the way it does.
</p><p><br />
In the decimal system, without realizing it, we write our numbers to mean powers of ten. For example, if you take the number 17282 (which I just made up), and divide it down we get this:
</p>
<table border="1">
<tr>
<td> Power of ten      </td><td> 4     </td><td> 3     </td><td> 2     </td><td> 1     </td><td> 0
</td></tr>
<tr>
<td> Ten to that power </td><td> 10000 </td><td> 1000  </td><td> 100   </td><td> 10    </td><td> 1
</td></tr>
<tr>
<td> Digit             </td><td> 1     </td><td> 7     </td><td> 2     </td><td> 8     </td><td> 2
</td></tr></table>
<p><br />
To reach the number 17282 from here, we simply take ten to the power of the number in the top row, multiply it by the number in the bottom row, and then add all those numbers together. We get 10000 + 7000 + 200 + 80 + 2. Obviously, this is simplistic, and we do it without even realizing we're doing it. You're probably thinking "Riiight, what does Taran think he's getting at?" Well, we aren't so special that our counting system is the only way to count.
</p><p><br />
Now, there is another numbering system that is used almost solely by computers. It only contains two numbers (1 and 0) and is therefore called the binary (meaning two) system. Binary numbers look like this: 101011101101, and you often see them in ads for computers and other electronic equipment (oftentimes they are shown streaming out of a CD player on television commercials). Digits in the binary system are called bits (short for BInary digiT)Binary numbers are almost impossible to translate to decimal directly, and so some math must be done.
</p><p><br />
Binary works in the same way, by adding powers of a number. In the case of binary, since there are two numbers in the whole system, that number is naturally two. Here are some examples of powers of two. These numbers might look familiar to some people.
</p><p><br />
</p>
<table border="1">
<tr>
<td> Power of 2 </td><td> Binary number </td><td> Decimal number
</td></tr>
<tr>
<td> 0          </td><td> 1             </td><td> 1
</td></tr>
<tr>
<td> 1          </td><td> 10            </td><td> 2
</td></tr>
<tr>
<td> 2          </td><td> 100           </td><td> 4
</td></tr>
<tr>
<td> 3          </td><td> 1000          </td><td> 8
</td></tr>
<tr>
<td> 4          </td><td> 10000         </td><td> 16
</td></tr>
<tr>
<td> 5          </td><td> 100000        </td><td> 32
</td></tr>
<tr>
<td> 6          </td><td> 1000000       </td><td> 64
</td></tr>
<tr>
<td> 7          </td><td> 10000000      </td><td> 128
</td></tr>
<tr>
<td> 8          </td><td> 100000000     </td><td> 256
</td></tr>
<tr>
<td> 9          </td><td> 1000000000    </td><td> 512
</td></tr>
<tr>
<td> 10         </td><td> 10000000000   </td><td> 1024
</td></tr></table>
<p>Ridiculous eh? &nbsp;:)
</p><p><br />
We need a better system! The reason we get such strange results is because 10 is not a power of two. We need to find a system where the number base IS a power of two. The most commonly used system used is base-16, or hexadecimal. I'm sure if you've perused the SPHERE boards, you've seen the word hex floating around. No, this isn't a curse or evil spell, it's a short way of saying "hexadecimal".
</p><p><br />
</p>
<table border="1">
<tr>
<td> Binary </td><td> Decimal </td><td> Hexadecimal
</td></tr>
<tr>
<td> 1      </td><td> 1       </td><td> 1
</td></tr>
<tr>
<td> 10     </td><td> 2       </td><td> 2
</td></tr>
<tr>
<td> 11     </td><td> 3       </td><td> 3
</td></tr>
<tr>
<td> 100    </td><td> 4       </td><td> 4
</td></tr>
<tr>
<td> 101    </td><td> 5       </td><td> 5
</td></tr>
<tr>
<td> 110    </td><td> 6       </td><td> 6
</td></tr>
<tr>
<td> 111    </td><td> 7       </td><td> 7
</td></tr>
<tr>
<td> 1000   </td><td> 8       </td><td> 8
</td></tr>
<tr>
<td> 1001   </td><td> 9       </td><td> 9
</td></tr>
<tr>
<td> 1010   </td><td> 10      </td><td> A
</td></tr>
<tr>
<td> 1011   </td><td> 11      </td><td> B
</td></tr>
<tr>
<td> 1100   </td><td> 12      </td><td> C
</td></tr>
<tr>
<td> 1101   </td><td> 13      </td><td> D
</td></tr>
<tr>
<td> 1110   </td><td> 14      </td><td> E
</td></tr>
<tr>
<td> 1111   </td><td> 15      </td><td> F
</td></tr>
<tr>
<td> 10000  </td><td> 16      </td><td> 10
</td></tr></table>
<p><br />
See how it works? There are an extra six numbers added onto the end of the system, represented by the first six letters of the alphabet.
</p><p><br />
Now, in SPHERE scripting, you are almost NEVER going to be dealing with binary numbers that are NOT powers of two, and if you do, you can simply use any scientific calculator to figure it out. But it's a lot easier in hexadecimal.
</p><p>(This is the last table, I promise!!)
</p>
<table border="1">
<tr>
<td> Binary        </td><td> Hexadecimal
</td></tr>
<tr>
<td> 000000001 (1) </td><td> 01
</td></tr>
<tr>
<td> 000000010 (2) </td><td> 02
</td></tr>
<tr>
<td> 000000100 (3) </td><td> 04
</td></tr>
<tr>
<td> 000001000 (4) </td><td> 08
</td></tr>
<tr>
<td> 000010000 (5) </td><td> 010
</td></tr>
<tr>
<td> 000100000 (6) </td><td> 020
</td></tr>
<tr>
<td> 001000000 (7) </td><td> 040
</td></tr>
<tr>
<td> 010000000 (8) </td><td> 080
</td></tr>
<tr>
<td> 100000000 (9) </td><td> 0100
</td></tr></table>
<p><br />
As you can see, there's a bit of a pattern in the hexadecimal column. You might be thinking, there seems to be some sort of pattern of the numbers 1, 2, 4 and 8. And you would be right. Another detail you may notice is the zeros in front of the hexadecimal numbers (like 0100, rather than just 100). In SPHERE, that 0 tells the script "Hey, this number is HEX!" 0100 and 100 are very different numbers.
</p><p><br />
Let's say, for a SPHERE script, you need to set the 13th bit of a number (FLAGS, for example), you could write something like this:
</p><p><br />
<b>SRC.FLAGS |= 8192</b>
</p><p><br />
But would you really remember that 8192 is 2 to the 13th power? I didn't think so. What would be easier is to go down through your list in your head, until you reach the 13th number. (Remember, START AT ZERO when you're counting!)
</p><p><br />
</p>
<table border="1">
<tr>
<td> 01  </td><td> 02  </td><td> 04  </td><td> 08  </td><td> 010 </td><td> 020 </td><td> 040 </td><td> 080 </td><td> 0100 </td><td> 0200 </td><td> 0400 </td><td> 0800 </td><td> 01000 </td><td> 02000
</td></tr>
<tr>
<td> 2^0 </td><td> 2^1 </td><td> 2^2 </td><td> 2^3 </td><td> 2^4 </td><td> 2^5 </td><td> 2^6 </td><td> 2^7 </td><td> 2^8  </td><td> 2^9  </td><td> 2^10 </td><td> 2^11 </td><td> 2^12  </td><td> 2^13
</td></tr></table>
<p>And there you have it. The first 14 powers of two in hexademical.
</p><p><br />
<b>SRC.FLAGS |= 02000</b>
</p><p><br />
The above code is identical to the previous example. 8192 (decimal) is EQUAL to 02000 (hexadecimal)
</p><p><br />
<b>8192 = 02000</b>
</p><p><br />
You may be saying, "How do I know he's just not making all of this up?" Well, our wonderful friends at Microsoft have provided us with a nice tool that converters from decimal to hexadecimal to binary to octal (ANOTHER numbering system that is useless in SPHERE, so we will not deal with it). It's called the Calculator. You may find it by clicking your start button, going to Programs, then Accessories. Calculator should be sitting there looking pretty. Once in the calculator program, go to the View menu, and click Scientific. You'll see the display drastically change. To convert a number between numbering systems, simply click on the original system (Dec), type a number (8192), then click on the button for the other system (Hex). Automagically, Windows will convert your decimal number to hexadecimal. Stick a zero on the front, and SPHERE will be perfectly happy with it.
</p><p><br />
This is probably the hardest thing in all of SPHERE scripting to understand. Luckily, because of the next section, you won't have to deal with scary numbers most of the time. If I still have you at the end of this lesson, I know you're going to do great!
</p><p><br />
Onward to some SPHERE scripting!
</p><p><br />
</p>
<a name="Defnames" id="Defnames"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_1&amp;action=edit&amp;section=2" title="Edit section: Defnames">edit</a>]</span> <span class="mw-headline">Defnames</span></h2>
<p>Here's a list of scary numbers you might encounter while programming in SPHERE.
</p>
<table border="1">
<tr>
<td> The Scary Number </td><td> What it means
</td></tr>
<tr>
<td> 0eed             </td><td> ID of a gold coin
</td></tr>
<tr>
<td> 0dda             </td><td> ID of a red moongate
</td></tr>
<tr>
<td> 1650,1440        </td><td> Coordinates of Britain
</td></tr>
<tr>
<td> 021              </td><td> The code number for red
</td></tr>
<tr>
<td> 04000            </td><td>  The invisible color
</td></tr>
<tr>
<td> 04000efad        </td><td> An item's serial number
</td></tr>
<tr>
<td> 4                </td><td> The PLEVEL of a GM
</td></tr>
<tr>
<td> 2048 (or 0800)   </td><td> Flag for incognito spell
</td></tr>
<tr>
<td> 010 (or 16)    </td><td> Memory type for aggressors
</td></tr></table>
<p><br />
Obviously, no one is going to want to remember those numbers. Back in the old days, before SPHERE and TUS (pre-.50 SPHERE) and even into the mists of Grayworld (pre-.41 TUS), we all had to remember those numbers. I know all of those numbers I just said (except the serial number which I just made up), plus a couple dozen more, by heart. Luckily for those of you who don't like to sit around remembering numbers all day, SPHERE has developed a system whereby things can be identified by names instead of numbers.
</p><p><br />
Actually, the things are still identified by numbers. It's the numbers which are identified by the name.
</p><p><br />
In the game, type .add 0eed and press enter. A target will come up and you'll create a single gold piece.
</p><p><br />
Now type .add i_gold and press enter. You will create the same single gold piece.
</p><p><br />
Now which is easier to remember, 0eed or i_gold. I would say that i_gold wins by a long shot. But how does this magic happen? Let's take a look at the script definition for a piece of gold. Don't worry about understanding it. I'll explain item scripts in full in the next section! You can find this script in the file sphere_item_resources.scp.
</p><p><br />
<tt><font color="darkgreen">[ITEMDEF 0eed]<br />
//gold coin<br />
<font color="ff0000">DEFNAME=i_gold</font><br />
TYPE=T_GOLD<br />
VALUE=1<br />
CATEGORY=Provisions - Miscellaneous<br />
SUBSECTION=Coins<br />
DESCRIPTION=Gold Coin<br />
DUPELIST=0eee,0eef</font><br /></tt>
</p><p><br />
I have highlighted in red the line that really matters for the purposes of this lesson. Take note of the 0eed in the top line of the script, and then ignore the rest of it. That 0eed is the real item number of this item. We'll cover item numbers more in the next section.
</p><p><br />
But the real line we want to see the <font color="ff0000">DEFNAME=i_gold</font> line. This is where the script tells the server, "I want item 0eed to be identified by the text i_gold from here on." If you tried to refer to i_gold before the server read this script (more on reordering scripts in <a href="/index.php/Chapter_2" title="Chapter 2">Chapter 2</a>, the server would spit out an error, but now it knows what that refers to, so you can use it in the game or in another script.
</p><p><br />
You should ALWAYS give items you create a DEFNAME that fits the item. Usually the defname will be defined in the [ITEMDEF] identifier itself (again, more on this later), but if you insist upon using numbers, be sure you give it an easy-to-remember name (not golden_gulash for a viking sword). It makes it easier to remember names than numbers.
</p><p><br />
A second way to define a DEFNAME is by using the [DEFNAME] tag in a script. Here is an example of that:
</p><p><br />
<tt><font color="darkgreen">[DEFNAME colors]<br />
color_blue 02<br />
color_red 021<br />
color_green 041</font><br /></tt>
</p><p><br />
You'll find a script similar to this in spheredefs.scp, another file that should be loaded before any other file.
</p><p><br />
Here's the rundown on this script, line by line:
</p><p><br />
<b>Line 1</b>: This is where the type of script and the defname (yes colors is the defname of this script) is defined. This tells the server what type of script to expect between this and the next identifier (identifiers are the lines contained in square brackets). All identifiers have this format. The first parameter is the script type. These are numerous, and I will go over them as we get to them. The second parameter is either an ID number or a defname. In most cases, in the scripts you write, it will be a defname. The only exceptions to this I can think of would be if you used a program to insert a new item into the client files.
</p><p><br />
<b>Lines 2-4</b>: These set up your individual DEFNAME pieces. It says that color_blue is equal to 02, color_red is equal to 021, and color_green is equal to 041. You may have any number of spaces between the name and the value. The definitions contained in spheredefs.scp are among the most useful you will encounter, as they prevent you from writing the long scary numbers we went over in the previous section. These include things like names for flags, names for item attributes, names for the built-in MIDI or MP3 music, names for memory types, and many other things. Look through the file to see what it offers you.
</p><p><br />
That's about it for DEFNAMEs. You'll see more of these later as we cover other types of scripts.
</p><p><br />
Now go on to learn about items.
</p><p><br />
</p>
<a name="ITEMDEF" id="ITEMDEF"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_1&amp;action=edit&amp;section=3" title="Edit section: ITEMDEF">edit</a>]</span> <span class="mw-headline">ITEMDEF</span></h2>
<p>Or, how to make a mountain from a molehill, SPHERE style
</p><p><br />
Most people make item scripting much harder than it needs to be. For the purposes of this tutorial, since there is a more advanced one later, we will simply go over the basics of an ITEM script, line by line. We'll be using the gold script from the previous lesson, provided I can find it again.... 
</p><p><br />
Ah, here it is, conveniently color coded for your viewing pleasure!
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[ITEMDEF 0eed]
//gold coin
DEFNAME=i_gold
TYPE=T_GOLD
VALUE=1
CATEGORY=Provisions - Miscellaneous
SUBSECTION=Coins
DESCRIPTION=Gold Coin
DUPELIST=0eee,0eef
</pre>
<p><br />
This is the simplest of item scripts, since it has no additional behaviors beyond existing. I will go through this line by line, describing to you what each line does, and how it affects the end result.
</p><p><br />
<b>Line 1</b>: [ITEMDEF 0eed]
</p><p>The first lines of an item script are frequently the most important. Basically, this line tells the server "Hey this is an item and I want it to be called 0eed!" The server then looks through one of the client files (specifically art.idx), and identifies whether or not this item is one of the built-in items. I think all items below 04500 are defined as built-in items, so never define a new item in that range. By typing this line, you tell the server that an item script is following. You also define 0eed as a valid item, which will definitely help later on when you try to give gold to players!
</p><p><br />
<b>Line 2</b>: // gold coin
</p><p>This is the SPHERE version of comment. C programmers will recognize the format immediately. If you type // on any line of code, everything beyond that is ignored by the script reader. This can be on a line by itself, or at the end of a line to explain what the specific line does. In all cases, it won't affect your program, just make it easier to read.
</p><p><br />
<b>Line 3</b>: DEFNAME=i_gold
</p><p>You should know by now what this does! If you don't, go back and read the previous lesson! It tells the server that i_gold and 0eed mean the same thing. In item scripts, all parameters are defined in that format:
</p><p><br />
variable=value
</p><p><br />
You will see later on, when we get into scripting, how that format will help you more than you would believe. Items have a good number of variables that you can define, including:
</p>
<ul><li> DEFNAME
</li><li> ID
</li><li> TYPE
</li><li> VALUE
</li><li> RESOURCES
</li></ul>
<p>Other variables depend on the value of the TYPE. Which leads us right into...
</p><p><br />
<b>Line 4</b>: TYPE=t_gold
</p><p>The first thing you might say is "What the heck is t_gold?" Well it's a DEFNAME. Actually it's a number. And that number is 72. If you want to check me on this, look in spheredefs.scp, it's there! Writing TYPE=72 would have the exact same effect.
</p><p><br />
There are, currently, 183 built-in item types. These are hardcoded item types that contain predefined actions for an item. If an item has no type, when you click it, you get the "You cannot think of a way to use that item" message. There is a complete list of types, and how to set them up, here . All you need to know for now is that setting the type of this item to t_gold has no effect other than to make the item act like a gold coin (i.e. you can buy stuff with it!) Setting another item to type t_gold would probably make the server think that you can buy stuff with that item too. I've never tried this. It might be an interesting way to have unique currencies...
</p><p><br />
<b>Line 5</b>: VALUE=1
</p><p>This defines how much the item costs when purchased, in gold. Of course, this is one gold piece, which is worth, well, one gold piece. So the value of the item is one.
</p><p><br />
<b>Lines 6-8</b>: CATEGORY, SUBSECTION, DESCRIPTION
</p><p>These are lines used only by SPHERE's GM tool, Axis, which actually saves you a lot of work by typing ".add i_gold" for you. More importantly, it types ".add 01737" and things like that for you, for items that were not important enough to get their own separate DEFNAME.
</p><p><br />
<b>Line 9</b>: DUPEITEM
</p><p>It would be a ton of work for the SPHERE team to define all 8000 items that came with the game, especially when many of them are the same. (For an example of this, use the .xflip command on a door or sign. It cycles through all of the DUPEITEMs for that the item being flipped.) The numbers listed here are item numbers, which probably have not been defined yet. Here is the script for item 0eee:
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[ITEMDEF 0eee]
//gold coins
DUPEITEM=0eed
CATEGORY=Provisions - Miscellaneous
SUBSECTION=Coins
DESCRIPTION=Gold Coins
</pre>
<p><br />
As you can see, there is only one parameter for this whole item. It reiterates the DUPEITEM and sends the server looking to our 0eed (or i_gold) item for more information, such as TYPE and VALUE. DUPEITEM only exists to save typing. You probably won't use it.
</p>
<a name="CHARDEF" id="CHARDEF"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_1&amp;action=edit&amp;section=4" title="Edit section: CHARDEF">edit</a>]</span> <span class="mw-headline">CHARDEF</span></h2>
<p>Or, what it takes to make a naked man who can stand around and say "Huh?"
</p><p><br />
NPCs... They make the world go around. They are what makes UO a unique multiplayer game. The monsters and NPCs you create make your server unique from any other. This section of chapter one will cover how to create a simple naked man who walks around and says little more than "Huh?" (or "Stop thief!" if you tell him to!).
</p><p><br />
First of all, we'll look at the script for a simple naked man. I'm pulling this out of spherechar_human.scp.
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[CHARDEF 0190]
DEFNAME=c_man
Name=Man
ICON=i_pet_MAN
CAN=MT_EQUIP|MT_WALK|MT_RUN|MT_USEHANDS
RESOURCES=i_flesh_head, i_flesh_torso, i_flesh_right_arm, i_flesh_left_arm
FOODTYPE=15 t_food, t_fruit
DESIRES=i_gold,e_notoriety
AVERSIONS=t_TRAP,t_eerie_stuff
SHELTER=r_house
BLOODCOLOR=0

TSPEECH=spk_human_prime
TSPEECH=spk_human_default
TEVENTS=e_Human_HearUnk
DESCRIPTION=Man
SUBSECTION=Miscellaneous
CATEGORY=Civilized
</pre>
<p><br />
As you can see, it doesn't look a lot different than the item scripts we examined in the previous section. There are a lot of variables set that are the same, including DEFNAME, DESCRIPTION, and the other Axis variables.
</p><p><br />
But, there are a lot of new things here that we will again go over, one line at a time! And it's longer this time! Let the good times roll! (Sorry if you're not American.. All my American clichés are probably growing irritating!)
</p><p><br />
<b>Line 1</b>: [CHARDEF 0190]
</p><p>Surprise surprise! It's an identifier, telling the server that we are going to be defined a character between this and the next [identifier]. And we also tell it that our character, or NPC, will have the ID 0190. The server knows that this ID is one of the built-in IDs. In fact, it's the ID of a naked man. You also know that 0190 is hexadecimal is 400 in decimal right? &nbsp;:) Well why didn't you know that! Oh I'm just kidding, you don't need to know things like that.
</p><p><br />
<b>Line 2</b>: DEFNAME=c_man
</p><p>Nothing new here. c_man is now the same as 0190. Most character DEFNAMEs will begin with C and then an underscore (c_) like you see above.
</p><p><br />
<b>Line 3</b>: Name=Man
</p><p>Oh oh! Something new! Items come with default names, built in to the server. Characters don't. So we have to assign him a name. We can give him any name we want, but since this isn't a specific man, we just give him a name telling us what he is. In this case "Man".
</p><p><br />
<b>Line 4</b>: ICON=i_pet_man
</p><p>It took me a while to figure this one out. ICON defines what little picture you see when you're using the Tracking skill and all those little miniature creatures appear in the window. Those are actually items, all the i_pet items. To find out what the i_pet item for your creature should be, create him in the game using .addnpc, then use the .shrink command on him. The ID of the item that he becomes is your i_pet item.
</p><p><br />
<b>Line 5</b>: CAN=mt_*
</p><p>(In case you don't know, * means "anything" for those who use Linux.)
</p><p>This is one of the most important lines of your character script, next to the ID we give him in the first line. First, because it allows us to tell the game what our NPC can do and what he can't do. There are only a few mt_* items, all of which are defined in spheredefs.scp. For the purpose of the lesson, I am going to copy them here. (The purple comments are mine.)
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">MT_NONMOVER        0 // We can't move at all
MT_GHOST          01 // We can walk through doors and such, like a ghost
MT_SWIM           02 // I can swim! (Water elementals, dolphins, etc)
MT_WALK           04 // I can move. Set this if you want your creature to move.
MT_FLY           010 // Moves through (supposed to be over) trees
MT_FIRE_IMMUNE   020 // Immune to damage by fire. Setting this on a player is bad. &nbsp;:)
MT_EQUIP       00100 // Can equip things
MT_USEHANDS    00200 // Can use his hands to carry things (or open doors)
MT_MALE            0 // Is a male
MT_FEMALE      00800 // Is a female
MT_NONHUM      01000 // Non-human. I'm not sure what this does.
MT_RUN         02000 // Can move really fast!
</pre>
<p><br />
According to this chart, we can see that if we don't give a creature a CAN flag, it will be an MT_MALE and an MT_NONMOVER (the two zeros). You can see from the example that by putting a | (found by pressing shift+backslash) between two CAN flags, we can give him more than one. In this case, we allow our man to equip things, walk, run, and use his hands. (An interesting fact is, even creatures that don't have hands can be set to use their hands, thus allowing them to carry light sources. Fire elementals do this. That's how they glow.)
</p><p><br />
<b>Line 6</b>: RESOURCES
</p><p>Resources is a very morbid name for this setting. Especially for a person. These are the items that you get whenever you chop up this creature's corpse. Scary eh? &nbsp;:)
</p><p><br />
<b>Line 7-10</b>: FOODTYPE, DESIRES, AVERSIONS
</p><p><b>FOODTYPE</b>: Defines what kind of food the npc will eat and if NPC_AI_FOOD is on it'll make the npc look for this food + grass when he's hunger.
</p><p><b>DESIRES</b>: Defines what kind of items will the npc be interested in, if NPC_AI_EXTRA is on it'll show what items the npc will loot of players corpses or walk towards when it's on the ground.
</p><p><b>AVERSIONS</b>: No idea, but I think it tells the npc what sort of NPCs he'll try to fight, for example: I have a horse with e_horse as an event, and an imp without any events, if the npc has AVERSIONS=e_horse it'll prefer to fight the horse.
</p><p><br />
<b>Line 11</b>: BLOODCOLOR
</p><p>Ever wanted to make your players have green blood? This is where you do it! A color number or a color defname will work fine. (Try to learn the numbers for common colors, it makes it so much easier.)
</p><p>The rest of it: TSPEECH and TEVENTS 
</p><p><br />
We're going to cover these in sections of their own. They are probably the most complex topics in scripting! (How many times do you suppose I'm going to say that before it's actually true?)
</p><p><br />
<i><font color="darkblue">Some other things:</font></i>
</p><p><br />
On 56B we have some other fields like MOVERATE,RESLEVEL,RESDISPDNID and RESDISPDNHUE. They sound some difficult and strange thing but they aren't. Here's the explanation for them: 
</p><p><b>MOVERATE</b>: This setting (that can only be writed at the npc chardef) controls how fast the npc moves. The smaller the value, the faster the npc is. For example, if I have a horse chardef with default moverate (100) and another with moverate=60, the one with 60 will walk and run a lot faster than the other horse. This is great for making really difficult monsters to kill. 
</p><p><b>RESLEVEL</b>: This tells sphere what version of uo this monster is from, for example, a Wanderer of the Void will have RESLEVEL=3 (3=AOS) (see sphere_defs.scp for a complete list), so only accounts with RESDISP 3 or bigger can see this monster as he really is. 
</p><p><i>NOTE</i>: If you set a lower value for RESLEVEL, if the player doesn't have this npc anim he'll crash. 
</p><p><b>RESDISPDNID</b>: As you probably have seen, I used a lot of "as he really" is, exactly because of this setting, this tells the client what monster will the player see instead of the correct one. For example, this Wanderer of the Void will show as Wanderer of the Void for those who has ACCOUNT.RESDISP=3 or bigger, but for those who has smaller values it'll show as a c_spectre (if you so define). 
</p><p><b>RESDISPDNHUE</b>: This defines what color will the player see the monster if the RESDISPDNID id is shown to him (have an account.resdisp lower than the reslevel of this char)
</p><p>Here's an example for those new settings:
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[CHARDEF 310]
DEFNAME=c_Wailing_Banshee
NAME=Wailing Banshee
SOUND=snd_monster_zombie1
ICON=i_pet_wailingbanshee
DAM=11,16
RESDISPDNID=c_spectre
RESLEVEL=3
RESDISPDNHUE=01
ARMOR=20
CAN=MT_WALK|MT_FLY
DESIRES=i_gold,e_notoriety,e_horses,c_man,c_woman,t_corpse
CATEGORY=New Monsters
SUBSECTION=AOS
DESCRIPTION=Wailing Banshee

ON=@Create
    NPC = brain_monster
    FAME = {100 3000}
    KARMA = {-5000 -6999}
    STR = {126 166}
    INT = {86 115}
    DEX = {41 75}
    MAGICRESISTANCE = {75.0 95.0}
    TACTICS = {45.0 75.0}
    WRESTLING = {50.0 70.0}
    
ON=@NpcRestock
    ITEM = i_gold, {50 100}
    ITEM = i_reag_daemon_bone, {2 6}
</pre>
<p><br />
And there you have it. A simple character script and some new things. Read the chapter that is all about making NPCs later in the tutorial.
</p>
<a name="TEMPLATE" id="TEMPLATE"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_1&amp;action=edit&amp;section=5" title="Edit section: TEMPLATE">edit</a>]</span> <span class="mw-headline">TEMPLATE</span></h2>
<p>Or, how to put great laggy quantities of items into one unlaggy container. 
</p><p><br />
You've all seen it. Those shards out there that don't use TEMPLATEs. When you kill, say, a dragon, on those shards, and go to loot him, you find that rather than neatly organized containers, there are 100 potions scattered about the loot window. Not only that, but all your magical weapons are buried neatly beneath them! 
</p><p><br />
How do we solve this problem? Well, SPHERE has given us the handy tool of TEMPLATEs. These allow you to define a container item, AND the items inside of it, AT THE SAME TIME. Isn't that neat? I thought so too, when I first figured out what they were. Let's do our traditional take-apart-the-script section. I'll place a nice TEMPLATE from the file spheretemp_loot.scp. 
</p><p><br />
<tt><font color="darkblue">[TEMPLATE 101505]<br />
DEFNAME=backpack_poor<br />
CATEGORY=Item Templates<br />
SUBSECTION=Loot Templates<br />
DESCRIPTION=Poor Backpack<br />
CONTAINER=i_backpack<br />
ITEM={ random_food 1 0 3 },{ 1 3 }<br />
ITEM={ random_bottle 1 0 8 }<br />
ITEM={ random_light 1 0 8 }<br />
ITEM={ random_male_tops 1 0 4 }<br />
COLOR=colors_all<br />
ITEM={ random_male_pants 1 0 4 }<br />
COLOR=colors_all<br />
ITEM=POOR_GOLD_PILE<br /></font></tt>
</p><p><br />
Wow, that looks confusing. But don't worry, by the time we're done, you'll know exactly what it means! 
</p><p><br />
<font color="darkblue">[TEMPLATE 101505]</font>: First of all, we look at the header for our template. An interesting thing about templates is that the item name cannot be a DEFNAME like all other scripts. It must be a ridiculously high number like 101505. 
</p><p><br />
<font color="darkblue">DEFNAME=backpack_poor</font>: Of course, SPHERE developers are not entirely evil, and have provided us with the ability to give these scary numbers a DEFNAME for easier access. You tell me, which would you rather type? ".add 101505" or ".add backpack_poor"? I thought so. 
</p><p><br />
<font color="darkblue">CATEGORY, SUBSECTION, DESCRIPTION</font>: Axis crap. Optional. See the previous sections for a description of what these do. 
</p><p><br />
<font color="darkblue">CONTAINER=i_backpack</font>: Ahh, now we're getting down to the meat of this thing. This specifies the holding container that all other items in this template will be in. When you add the item in game, you will see this container. In this case, it's a backpack. Simple enough. This can be any valid item with a TYPE of t_container or t_container_locked. 
</p><p><br />
<font color="darkblue">ITEM={ random_food 1 0 3},{1 3}</font> Well, that's certainly cryptic. I think we need to break this line down even further. 
</p><p>But first, we're going to cover RANDOM SELECTORS! Sounds like fun doesn't it? Nah, it doesn't sound fun to me either, but it's absolutely necessary to a good shard. 
</p><p><br />
Basically, they are an easy way to get different numbers with one command. What fun would a shard be where you killed a dragon and got a Platemail of Magic Stuff and a Super Duper Sword of Power every single time? Everyone would be running around with them. What we need is some variety! 
</p><p><br />
There are two types of random selectors: weighted random and ranged random. Weighted random makes a statement like this: "Ok, 1 out of 10 times pick Number A, 3 out of 10 times pick Number B, and 6 out of 10 times pick number C". Ranged random makes a statement like this: "Pick any number between the two numbers I give you". 
</p><p><br />
Our example actually has an example of both ranged random and weighted random. We'll cover them in the order they appear: 
</p><p><br />
{ random_food 1 0 3} 
</p><p><br />
This is a weighted random selector. The way to interpret these is to take the numbers that appear between the parentheses and divide them into sets of two: 
</p><p><br />
random_food 1<br />
0 3
</p><p><br />
Add up the second numbers in both sets, and we get 4. This tells SPHERE, "Ok, 1 out of four times, I want you to pick random_food, and 3 out of four times, I want you to pick zero." You can even have random sets within random sets, but then it just gets confusing. 
</p><p><br />
{ { random_food 1 0 3} 1 random_clothing 1} 
</p><p><br />
Can you figure it out? 
</p><p><br />
random_clothing 1
{ random_food 1 0 3} 1
</p><p><br />
</p><p>2 is our magic number in this case. One out of two times, SPHERE will pick random_clothing, and one out of two times, SPHERE will pick our previous random selector, which will then select one of its own options. If you're confused at this point, don't worry. This is extremely rare, and we'll see in a moment how templates help us to solve this problem. 
</p><p><br />
I did mention, though, that there is another type of random selector, and you can probably see what it is: 
</p><p><br />
{1 3} 
</p><p><br />
NOTE: Spacing here is important. There must be ZERO spaces between the { and the first number, or the } and the last number. It will behave strangely otherwise. 
</p><p><br />
This tells SPHERE "Pick a number between 1 and 3, inclusive". Inclusive means that SPHERE can pick 1, 3, or any number in between. In this case, the range is rather limited. SPHERE will give you a 1, 2 or 3 here. Ranged random selectors are actually more often used inside of weighted random selectors. 
</p><p><br />
{ {1 3} 3 {4 9} 1} 
</p><p><br />
"One out of four times, pick a number between 4 and 9. Three out of four times, pick a number between 1 and 3." 
</p><p><br />
And with that out of the way, we're going to analyze the actual line of the script from above. The Piece What the Line does ITEM=
This tells the script "Ok, we're going to add an item to this container. Anything after the = tells the script exactly what it is we're adding and in what amounts. You could easily say ITEM=i_platemail_chest, or something like that, without the mysterious { } sections, but the reason templates are interesting is because they can vary greatly. 
</p><p><br />
<font color="darkblue">{ random_food 1 0 3}</font>
</p><p>This is the item you will be creating. As we can see from our weighted random selector lesson, 1 out of 4 times, it will be random_food, and 3 out of 4 times, it will be zero. If an ITEM is zero, nothing will be created this time. Basically this is saying "There will be a one in four chance of getting random_food in this container." What is random_food you ask? Well, it happens to be another TEMPLATE, defined in spheretemplate.scp, I believe. 
</p><p>{1 3} This is the amount of the item that will be created. You should recognize this as a ranged random selector. This tells SPHERE to put between 1 and 3 of this item into the container. Of course, if the item is zero as selected above, this has no effect since one nothing and three nothings are still nothing. 
</p><p><br />
So basically, that is a template script. You then fill it with as many items as you want. You may also notice the following construction: 
</p><p>ITEM=i_sword_long,R11 
</p><p>This is a shorthand way of writing this: 
</p><p>ITEM={ i_sword_long 1 0 10 } 
</p><p>R11 means "one out of 11 chance of finding this item". And you can add an amount selector to the end of that as well, which makes it look long and scary: 
</p><p>ITEM=i_sword_long,R11,{4 5} 
</p><p>But why would you want 4 or 5 long swords in one item? That would be bizzare. &nbsp;:) 
</p><p><br />
And that's about it for templates. Congratulations, you're finished with chapter 1. Now you should be able to understand the examples to follow on the next section. You may also have some questions which are addressed in the common questions area. If you have a question which is not addressed there, perhaps it is too advanced of a topic for chapter 1. I assure you almost every aspect of SPHERE scripting will be covered in later chapters. 
</p><p><br />
<i>(A template example by Belgar)</i>
</p><p><tt><font color="darkblue">[TEMPLATE tm_necromancer]<br />
CONTAINER=i_bag<br />
ITEM=random_necro_scroll<br />
ITEM=random_necro_scroll<br />
ITEM=random_necro_reagent, {5 12}<br />
ITEM=random_reagent, {5 12}<br />
ITEM=random_necro_reagent, {5 12}<br /></font></tt>
</p>
<a name="Examples" id="Examples"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_1&amp;action=edit&amp;section=6" title="Edit section: Examples">edit</a>]</span> <span class="mw-headline">Examples</span></h2>
<p>Or, um. Well I guess there really isn't another way to say "Examples".
</p><p><br />
This shall be my attempt to create the most basic new items available. You will see things in these examples that are NOT mentioned in the tutorials. The major factor will be ON=@Create, which is the primary topic of Chapter 2. Just know for now that things you can change in game (color, etc) must go under ON=@Create.
</p><p><br />
<b>Example 1</b>: A Red Sword
</p><p><tt><font color="darkblue">[ITEMDEF i_sword_red]<br />
ID=i_sword_viking<br />
TYPE=t_weapon_sword<br />
NAME=The Red Sword<br />
CATEGORY=Weapons<br />
SUBSECTION=New Swords<br />
DESCRIPTION=Red Sword<br />
</p><p>ON=@Create
</p>
<dl><dd>COLOR=colors_red // This is a comment. Comments are ignored by SPHERE.<br /></font></tt>
</dd></dl>
<p><br />
Wait, what is this weird <font color="darkblue">//</font> thing we've got going here? That's called a comment. It's completely ignored by SPHERE, so you can write whatever you want to the end of the line after //. You cannot have multi-line comments in SPHERE unless you use a new //, so don't even try it. SPHERE will give funky errors and then you'll have fun finding them. 
</p><p><br />
<b>Example 2</b>: A blue ettin
</p><p><tt><font color="darkblue">[CHARDEF c_ettin_blue]<br />
ID=02 // You could just as easily use c_ettin here.<br />
NAME=My Blue Ettin<br />
<br />
<br />
ON=@Create<br />
</p>
<dl><dd>COLOR=02 // This is a dark blue color. It's often used for Counselor robes. Remember it.<br /></font></tt>
</dd></dl>
<p><br />
</p><p><b>Example 3</b>: A template from the file, since I'm too lazy to write one myself
</p><p><tt><font color="darkblue">[TEMPLATE 101521]<br />
DEFNAME=goodie_meager_1<br />
CATEGORY=Item Templates<br />
SUBSECTION=Loot Templates<br />
DESCRIPTION=Meager Goodie 1<br />
ITEM={ meager_gold_pile 1 backpack_meager 1 pouch_meager 1 }<br />
ITEM={ random_boots 1 0 4 }<br />
ITEM={ random_gorget 1 0 4 }<br />
ITEM={ random_staff 1 0 4 }<br />
ITEM={ random_necklace 1 0 4 }<br />
ITEM={ i_cape 1 0 9 }<br />
<font color="darkred">COLOR=colors_all</font><br /></font></tt>
</p><p><br />
You may notice something new here (especially since I highlighted it in red), and yes, it is legal. Any lines between ITEM= lines will affect the previously created item. The COLOR= line here affects the ITEM created by the line
</p><p>ITEM={ i_cape 1 0 9 }
</p><p><br />
Remember, the best way to learn this type of scripts is to read the scripts provided for you in files like sphereitem_colorarm.scp and sphereitem_beers.scp.
</p>
<!-- 
NewPP limit report
Preprocessor node count: 370/1000000
Post-expand include size: 3359/2097152 bytes
Template argument size: 593/2097152 bytes
Expensive parser function count: 8/100
-->

<!-- Saved in parser cache with key d00b020c:pcache:idhash:2-0!1!0!!en!2 and timestamp 20120714134410 -->
<div class="printfooter">
Retrieved from "<a href="http://wiki.sphere.torfo.org/index.php/Chapter_1">http://wiki.sphere.torfo.org/index.php/Chapter_1</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/index.php/Special:Categories" title="Special:Categories">Category</a>:&#32;<span dir='ltr'><a href="/index.php/Category:Tutorials" title="Category:Tutorials">Tutorials</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/index.php/Chapter_1" title="View the content page [c]" accesskey="c">Page</a></li>
				 <li id="ca-talk" class="new"><a href="/index.php?title=Talk:Chapter_1&amp;action=edit&amp;redlink=1" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/index.php?title=Chapter_1&amp;action=edit" title="You can edit this page.&#10;Please use the preview button before saving [e]" accesskey="e">Edit</a></li>
				 <li id="ca-history"><a href="/index.php?title=Chapter_1&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>
				 <li id="ca-move"><a href="/index.php/Special:MovePage/Chapter_1" title="Move this page [m]" accesskey="m">Move</a></li>
				 <li id="ca-watch"><a href="/index.php?title=Chapter_1&amp;action=watch" title="Add this page to your watchlist [w]" accesskey="w">Watch</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-userpage"><a href="/index.php/User:Ben" title="Your user page [.]" accesskey="." class="new">Ben</a></li>
				<li id="pt-mytalk"><a href="/index.php/User_talk:Ben" title="Your talk page [n]" accesskey="n" class="new">My talk</a></li>
				<li id="pt-preferences"><a href="/index.php/Special:Preferences" title="Your preferences">My preferences</a></li>
				<li id="pt-watchlist"><a href="/index.php/Special:Watchlist" title="The list of pages you are monitoring for changes [l]" accesskey="l">My watchlist</a></li>
				<li id="pt-mycontris"><a href="/index.php/Special:Contributions/Ben" title="List of your contributions [y]" accesskey="y">My contributions</a></li>
				<li id="pt-logout"><a href="/index.php?title=Special:UserLogout&amp;returnto=Chapter_1" title="Log out">Log out</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://wiki.sphere.torfo.org/images/SphereWiki.png);" href="/index.php/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/index.php/Special:Search" id="searchform"><div>
				<input id="searchInput" name="search" type="text" title="Search SphereWiki [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search the pages for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/index.php/Main_Page">Main Page</a></li>
				<li id="n-recentchanges"><a href="/index.php/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-randompage"><a href="/index.php/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
				<li id="n-SphereServer-Forum"><a href="http://www.sphereserver.net">SphereServer Forum</a></li>
				<li id="n-help"><a href="/index.php/Help:Contents" title="The place to find out">Help</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-Setting_Up_Sphere'>
		<h5>Setting Up Sphere</h5>
		<div class='pBody'>
			<ul>
				<li id="n-Where-To-Get-Sphere"><a href="/index.php/Where_to_get_Sphere">Where To Get Sphere</a></li>
				<li id="n-Installing-Sphere"><a href="/index.php/Installing_Sphere">Installing Sphere</a></li>
				<li id="n-Configuring-Sphere.ini"><a href="/index.php/Configuring_Sphere.ini">Configuring Sphere.ini</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-Reference_Compendium'>
		<h5>Reference Compendium</h5>
		<div class='pBody'>
			<ul>
				<li id="n-Definitions"><a href="/index.php/Category:Definitions">Definitions</a></li>
				<li id="n-Objects"><a href="/index.php/Category:Objects">Objects</a></li>
				<li id="n-Scripts"><a href="/index.php/Category:Scripts">Scripts</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-Tutorial_Chapters'>
		<h5>Tutorial Chapters</h5>
		<div class='pBody'>
			<ul>
				<li id="n-Chapter-One"><a href="/index.php/Chapter_1">Chapter One</a></li>
				<li id="n-Chapter-Two"><a href="/index.php/Chapter_2">Chapter Two</a></li>
				<li id="n-Chapter-Three"><a href="/index.php/Chapter_3">Chapter Three</a></li>
				<li id="n-Chapter-Four"><a href="/index.php/Chapter_4">Chapter Four</a></li>
				<li id="n-Chapter-Five"><a href="/index.php/Chapter_5">Chapter Five</a></li>
				<li id="n-Chapter-Six"><a href="/index.php/Chapter_6">Chapter Six</a></li>
				<li id="n-Chapter-Seven"><a href="/index.php/Chapter_7">Chapter Seven</a></li>
				<li id="n-Chapter-Eight"><a href="/index.php/Chapter_8">Chapter Eight</a></li>
				<li id="n-Chapter-Nine"><a href="/index.php/Chapter_9">Chapter Nine</a></li>
				<li id="n-Chapter-Ten"><a href="/index.php/Chapter_10">Chapter Ten</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/index.php/Special:WhatLinksHere/Chapter_1" title="List of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/index.php/Special:RecentChangesLinked/Chapter_1" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-specialpages"><a href="/index.php/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/index.php?title=Chapter_1&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/index.php?title=Chapter_1&amp;oldid=789" title="Permanent link to this version of the page">Permanent link</a></li>			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 9 March 2011, at 03:18.</li>
					<li id="viewcount">This page has been accessed 11,166 times.</li>
					<li id="privacy"><a href="/index.php/SphereWiki:Privacy_policy" title="SphereWiki:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/index.php/SphereWiki:About" title="SphereWiki:About">About SphereWiki</a></li>
					<li id="disclaimer"><a href="/index.php/SphereWiki:General_disclaimer" title="SphereWiki:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Piwik -->
<script type="text/javascript">
var pkBaseURL = (("https:" == document.location.protocol) ? "https://sphere.torfo.org/piwik/" : "http://sphere.torfo.org/piwik/");
document.write(unescape("%3Cscript src='" + pkBaseURL + "piwik.js' type='text/javascript'%3E%3C/script%3E"));
</script><script type="text/javascript">
try {
var piwikTracker = Piwik.getTracker(pkBaseURL + "piwik.php", 4);
piwikTracker.trackPageView();
piwikTracker.enableLinkTracking();
} catch( err ) {}
</script>
<!-- End Piwik Tag -->
<!-- Served in 0.692 secs. --></body></html>
