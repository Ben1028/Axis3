<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.14.0" />
		<meta name="keywords" content="Chapter 5,De:Chapter 5,En:Chapter 5,Chapter 5,Es:Chapter 5,Fr:Chapter 5,Ja:Chapter 5,Tr:Chapter 5,Wiki Translation" />
		<link rel="alternate" type="application/x-wiki" title="Edit" href="http://wiki.sphere.torfo.org/index.php?title=Chapter_5&amp;action=edit" />
		<link rel="edit" title="Edit" href="http://wiki.sphere.torfo.org/index.php?title=Chapter_5&amp;action=edit" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="SphereWiki (en)" />
		<link rel="alternate" type="application/rss+xml" title="SphereWiki RSS Feed" href="http://wiki.sphere.torfo.org/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="SphereWiki Atom Feed" href="http://wiki.sphere.torfo.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Chapter 5 - SphereWiki</title>
		<link rel="stylesheet" href="/skins/common/shared.css?195" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins/common/commonPrint.css?195" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins/monobook/main.css?195" type="text/css" media="screen" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE50Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE55Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins/monobook/IE60Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins/monobook/IE70Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" />
		<link rel="stylesheet" href="/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" media="print" />
		<link rel="stylesheet" href="/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" />
		<link rel="stylesheet" href="/index.php?title=-&amp;action=raw&amp;maxage=18000&amp;smaxage=0&amp;ts=20120630142713&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins/common/IEFixes.js?195"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins";
		var wgArticlePath = "/index.php/$1";
		var wgScriptPath = "";
		var wgScript = "/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://wiki.sphere.torfo.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Chapter_5";
		var wgTitle = "Chapter 5";
		var wgAction = "view";
		var wgArticleId = "6";
		var wgIsArticle = true;
		var wgUserName = "Ben";
		var wgUserGroups = ["*", "user", "autoconfirmed"];
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = "683";
		var wgVersion = "1.14.0";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		var wgAjaxWatch = {"watchMsg": "Watch", "unwatchMsg": "Unwatch", "watchingMsg": "Watching...", "unwatchingMsg": "Unwatching..."};
		/*]]>*/</script>

		<script type="text/javascript" src="/skins/common/wikibits.js?195"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins/common/ajax.js?195"></script>
		<script type="text/javascript" src="/skins/common/ajaxwatch.js?195"></script>
		<script type="text/javascript" src="/index.php?title=-&amp;action=raw&amp;smaxage=0&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Chapter_5 skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
				<h1 id="firstHeading" class="firstHeading">Chapter 5</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From SphereWiki</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div style="margin: 0px; padding: 2px 2px 0px 2px; border: none; border-collapse:collapse; clear:both;">
<span style="float:right; font-weight:normal; font-size: x-small;"><a href="/index.php/Wiki_Translation" title="Wiki Translation">Help</a></span><div style="background-color:#e9e9e9; border-style:solid; border-width:1px; border-color:#aaa; padding: 0pt 4pt 8pt 4pt; font-size: 95%; text-align:center;"><b>Available languages</b></div>
<div style="border: 1px solid #aaa; background-color: #f9f9f9; border-collapse:collapse; font-size: 95%; padding: 2pt 4pt 2pt 4pt; margin: 0px;">          • <span lang="en"><strong class="selflink">English</strong></span>                                         
</div>
</div>
<div class="NavFrame" style="border:none; clear:none; margin: 0px; padding-top: 0px;">
<div class="NavHead" style="background-color:#e9e9e9; border-style:solid; border-width:1px; border-color:#aaa; margin: 0px; padding: 0pt 4pt 8pt 4pt; font-size: 95%;"><b>Missing languages</b></div>
<div class="NavContent" style="border: 1px solid #aaa; background-color: #f9f9f9; border-collapse:collapse; font-size: 95%; padding: 2pt 4pt 2pt 4pt;">        • <span lang="de"><a href="/index.php?title=De:Chapter_5&amp;action=edit&amp;redlink=1" class="new" title="De:Chapter 5 (page does not exist)">Deutsch</a></span>    • <span lang="es"><a href="/index.php?title=Es:Chapter_5&amp;action=edit&amp;redlink=1" class="new" title="Es:Chapter 5 (page does not exist)">Español</a></span>    • <span lang="fr"><a href="/index.php?title=Fr:Chapter_5&amp;action=edit&amp;redlink=1" class="new" title="Fr:Chapter 5 (page does not exist)">Français</a></span>           • <span lang="ja"><a href="/index.php?title=Ja:Chapter_5&amp;action=edit&amp;redlink=1" class="new" title="Ja:Chapter 5 (page does not exist)">日本語</a></span>                  • <span lang="tr"><a href="/index.php?title=Tr:Chapter_5&amp;action=edit&amp;redlink=1" class="new" title="Tr:Chapter 5 (page does not exist)">Türkçe</a></span>     
</div>
</div><div class="NavFrame" style="border:none;display:none;"></div>
<p><br />
</p>
<table id="toc" class="toc" summary="Contents"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Tags"><span class="tocnumber">1</span> <span class="toctext">Tags</span></a></li>
<li class="toclevel-1"><a href="#CTags"><span class="tocnumber">2</span> <span class="toctext">CTags</span></a></li>
<li class="toclevel-1"><a href="#Useful_TAG.2FCTAG_Functions"><span class="tocnumber">3</span> <span class="toctext">Useful TAG/CTAG Functions</span></a></li>
<li class="toclevel-1"><a href="#Vars"><span class="tocnumber">4</span> <span class="toctext">Vars</span></a></li>
<li class="toclevel-1"><a href="#Locals"><span class="tocnumber">5</span> <span class="toctext">Locals</span></a></li>
<li class="toclevel-1"><a href="#Floats"><span class="tocnumber">6</span> <span class="toctext">Floats</span></a></li>
<li class="toclevel-1"><a href="#Functions"><span class="tocnumber">7</span> <span class="toctext">Functions</span></a></li>
</ul>
</td></tr></table><script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
<a name="Tags" id="Tags"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_5&amp;action=edit&amp;section=1" title="Edit section: Tags">edit</a>]</span> <span class="mw-headline">Tags</span></h2>
<p>All these things you have learned so far seem rather restrictive don't you think? Well, I personally don't think they are very restrictive and I was able to script most things that people are scripting today in about version .40. But think about it. Items are restricted to MORE, MORE2, etc. Those poor characters only have PLOT2 to store stuff in before you have to start resorting to storing information on the variables of their backpack.
</p><p><br />
So SPHERE developers gave us a long-awaited feature:
</p><p><br />
The TAG.
</p><p><br />
Important TAG principle number one, even before you know how to use them:
</p><p><br />
<b>ALL TAGS ARE STRINGS. PERIOD.</b>
</p><p><br />
They are also just about the simplest part of SPHERE you will ever use. Here is an example of a tag: 
</p><p><br />
<tt><font color="darkblue">SRC.TAG.JOE = 1<br /></font></tt>
</p><p><br />
What did we just do? We just CREATED a variable on the SRC of this script. This variable is named TAG.JOE and has a value of 01. (Keep in mind that is the string 01, not the number 01.) It will be saved with the character and we can put ANYTHING WE WANT into it.
</p><p><br />
How's that for powerful? 
</p><p><br />
Here are some more examples of TAGs: 
</p><p><br />
<tt><font color="darkblue">ON=@DClick<br />
</p>
<dl><dd>SRC.TAG.CLICKS += 1<br />
</dd><dd>RETURN 1<br />
</dd></dl>
<p><br />
ON=@Equip<br />
</p>
<dl><dd>SRC.TAG.GOOFYTAG = This is a really stupid tag.<br />
</dd><dd>SRC.SYSMESSAGE &lt;SRC.TAG.GOOFYTAG&gt;  // Will see "This a really stupid tag."<br />
</dd><dd>RETURN 0 // Allow them to equip<br />
</dd></dl>
<p><br />
ON=@UnEquip<br />
</p>
<dl><dd>SRC.TAG.GOOFYTAG = // remove the tag<br />
</dd><dd>RETURN 0 // Allow them to unequip<br /></font></tt>
</dd></dl>
<p><br />
In those three examples, you have the three ways you can use a TAG. 
</p>
<ol><li> A TAG can store a number as in the first example. Unfortunately, it stores that number as a string, so we must use EVAL every time we want to use that number. 
</li><li> A TAG can store a string, as in the second example. Actually TAGs always store strings, but this one is obviously a string. 
</li><li> You can delete a TAG. We do this by typing the name of the tag and then an equal sign with nothing after it. Why would we ever want to delete a TAG? Well, TAGs, like everything else, use memory. The more memory you use, the more lag your server has. 
</li></ol>
<p><br />
TAG principle number two: 
</p><p><br />
<b>ALWAYS DELETE A TAG YOU ARE FINISHED USING.</b>
</p><p><br />
You may not be finished using a TAG at the end of a script. Or even when the server shuts down. In fact, there are some TAGs you'll want to stay on the character forever. However, if you finish using a TAG for any reason, DELETE IT. It conserves memory and is good scripting practice in general. 
</p><p><br />
Here is another important TAG principle. While the TAG is a very powerful feature, it has its limits. A TAG can ONLY be used on the following objects: 
</p>
<ol><li> Characters. 
</li><li> Items.
</li><li> Regions. Yes, regions can have TAGs. 
</li></ol>
<p><br />
It's very hard to give examples of the use of TAGs without going into a complex system. Most complex systems will use two, three, or more PERMANENT tags. For example, a system involving experience points might store numbers in TAG.CURRENT_EXPERIENCE_POINTS and TAG.CURRENT_LEVEL. You'll find a good example of when to use TAGs to your advantage in chapters from now on, as I present more and more complex scripts. BTW, when you're dealing with tags, sometimes you need to check if a tag exists or if it has a value. If it doesn't exist SPHERE gives a stupid error on the console. To avoid that, we make TAG's default to 0 by using TAG0 instead of TAG if the tag doesn't exist. If you want to you can always use TAG0 instead of TAG to be safe. Say you write this line of code: 
</p><p><br />
<tt><font color="darkblue">MORE = &lt;EVAL &lt;TAG.JOE&gt;&gt;<br /></font></tt>
</p><p><br />
If TAG.JOE contains no value (or hasn't been defined yet), you will get an error on the console that says something like this: Undefined value ' '. To complicate matters, the value of MORE will not change, which will severely screw up your script. To prevent this, use the following method: 
</p><p><br />
<tt><font color="darkblue">MORE = &lt;EVAL &lt;<b>TAG0</b>.JOE&gt;&gt;<br /></font></tt>
</p><p><br />
In this case we have used TAG<b>0</b> to access the TAG value. Accessing the TAG in this manner will return the value as normal, except for when TAG.JOE is undefined a "0" will be returned rather than a script error being raised.
</p><p><br />
The same trick can also be used when setting the value of a TAG. For example:
</p><p><br />
<tt><font color="darkblue">TAG0.JOE = &lt;MORE&gt;<br /></font></tt>
</p><p><br />
As you may expect, this sets the value of TAG.JOE to whatever value is held in MORE. The difference however is that because we have used TAG0 when setting the value, if the value of MORE is zero then TAG.JOE will actually be cleared! This may initially sound undesirable but it offers the benefit of reducing the number of TAGs stored on the object. Since we can use TAG0 to retrieve a value of zero when a tag doesn't exist then you may be wasting memory by storing a large number of TAGs all with a value of zero. Of course if you do decide to use TAG0 when setting the value of a TAG then you should ensure that you also use TAG0 when reading that value back, or else you will quickly run into the aforementioned "Undefined value" script error.
</p><p><br />
</p>
<a name="CTags" id="CTags"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_5&amp;action=edit&amp;section=2" title="Edit section: CTags">edit</a>]</span> <span class="mw-headline">CTags</span></h2>
<p>CTAGs are temporary versions of TAGs that are only available with objects (i.e. online player characters). CTAGs are not saved and will be cleared when the player logs out. This means that you don't have to worry about removing the tag after using it, assuming the player logs out one day&nbsp;:). You can use CTAG0 too, used just the same as you can with TAG0. In short, if you are going to use tags that will no longer be needed after logging out, it is probably a good idea to consider using a CTAG.
</p><p><br />
<b>Note:</b> CTAG can only be used with online players. Attempting to read from or write to a CTAG on a logged out player <i>will</i> raise a script error.
</p><p><br />
</p>
<a name="Useful_TAG.2FCTAG_Functions" id="Useful_TAG.2FCTAG_Functions"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_5&amp;action=edit&amp;section=3" title="Edit section: Useful TAG/CTAG Functions">edit</a>]</span> <span class="mw-headline">Useful TAG/CTAG Functions</span></h2>
<table border="1">
<tr>
<td>  CLEARTAGS
</td><td>  Removes all TAGs on an object, eg SRC.CLEARTAGS. Be careful with this as once the tag is gone there is no way to get it back.
</td></tr>
<tr>
<td>  CTAGLIST
</td><td>  Displays a list of tags on a client to SRC.
</td></tr>
<tr>
<td>  CTAGLIST LOG
</td><td>  Displays a list of tags on a client to the Sphere console (but not into logfile).
</td></tr>
<tr>
<td>  TAGAT.x.KEY
</td><td>  Returns the name of the TAG at position x. (the first TAG is at position 0)
</td></tr>
<tr>
<td>  TAGAT.x.VALUE
</td><td>  Returns the value of the TAG at position x. (the first TAG is at position 0)
</td></tr>
<tr>
<td>  TAGCOUNT
</td><td>  This function returns the number of TAGs on an object.
</td></tr>
<tr>
<td>  TAGLIST
</td><td>  Displays a list of tags on an object to SRC.
</td></tr>
<tr>
<td>  TAGLIST LOG
</td><td>  Displays a list of tags on an object to the Sphere console (but not into logfile).
</td></tr></table>
<p><br />
</p>
<a name="Vars" id="Vars"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_5&amp;action=edit&amp;section=4" title="Edit section: Vars">edit</a>]</span> <span class="mw-headline">Vars</span></h2>
<p>Perhaps you're wondering if there is a less memory-consuming method. Of course you were, don't deny it. 
</p><p><br />
And here I present it to you: 
</p><p><br />
<tt><font color="darkblue">VAR.CHEESE = 1<br /></font></tt>
</p><p><br />
Important VAR principles: 
</p>
<ol><li> Like TAGs, VARs are always stored as strings.
</li><li> Unlike TAG, VARs are not attached to any particular object. You never EVER use [obj].VAR.BLAH.
</li><li> VAR variables are GLOBAL, meaning they can be accessed from any script.
</li><li> Never assume a VAR has a specific value stored at the beginning of an event, especially if the same VAR is used in multiple scripts.
</li><li> Like TAGs, VARs can have any name. VAR.CHEESE, VAR.BLAH, VAR.WORLD_TIME, VAR.HELLO_WORLD
</li><li> If you don't need a value to be permanent, but need a place to store it temporarily during a script, use LOCAL, not TAG, not VAR.
</li></ol>
<p><br />
VARs are global TAGs. That's about it. 
</p><p><br />
If you want to get list of all VARs on your server type (into client or console): <b>SERV.VARLIST</b>, and if you want to log them into console write <b>SERV.VARLIST LOG</b> (this will not be saved into logfile). 
</p><p><br />
If you want to remove all server variables (VARs) type <b>SERV.CLEARVARS</b>. 
</p><p><br />
And that's your entire lesson on the VAR feature. I told you it would be short. As with TAG0 and CTAG0, you can also do VAR0. It works just like TAG0 or CTAG0 does. If that variable has no value then VAR0 will return 0 instead of nothing.
</p><p><br />
</p>
<a name="Locals" id="Locals"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_5&amp;action=edit&amp;section=5" title="Edit section: Locals">edit</a>]</span> <span class="mw-headline">Locals</span></h2>
<p>LOCALs are like VARs except they are only accessible within the script block they are defined in (i.e. a function or trigger) and then they are immediately cleared. The advantage is that they are much faster than VARs and you also don't have to worry about different scripts interfering with each other.
</p><p><br />
The following script demonstrates why you may want to use a LOCAL rather than a VAR:
</p><p><br />
<tt><font color="darkblue">[FUNCTION f_var_joe]<br />
VAR.NAME = Joe<br />
F_VAR_BOB<br />
SYSMESSAGE &lt;VAR.NAME&gt;<br />
RETURN<br />
<br />
[FUNCTION f_var_bob]<br />
VAR.NAME = Bob<br />
SYSMESSAGE &lt;VAR.NAME&gt;<br />
RETURN<br /></font></tt>
</p><p><br />
The idea with the two functions above is that F_VAR_JOE will show the message "Joe" and F_VAR_BOB will show the message "Bob". However, if you were to go ingame and type <b>.F_VAR_JOE</b>, you would receive two messages saying "Bob". Why is this?
</p><p><br />
Well, if you look closely at F_VAR_JOE you will see that after setting VAR.NAME to Joe, it then executes the function F_VAR_BOB and inside F_VAR_BOB we then set VAR.NAME to Bob. Because VARs are global variables, this inadvertently affects the behaviour of F_VAR_JOE and we don't get the output that we were after. Another flaw you may have not spotted with this script is that we haven't cleared VAR.NAME before the script ends and so Sphere still has VAR.NAME stored in memory (which in this particular case is a waste of resources as we have no further use for VAR.NAME).
</p><p><br />
In this particular scenario we could modify the functions to use different VAR names but unless we intend to manually check every script on the server we could easily end up using a VAR that another script is using and prevent that from working instead.
</p><p><br />
This is where the LOCAL comes in to play, see the following example:
</p><p><br />
<tt><font color="darkblue">[FUNCTION f_local_joe]<br />
LOCAL.NAME = Joe<br />
F_LOCAL_BOB<br />
SYSMESSAGE &lt;LOCAL.NAME&gt;<br />
RETURN<br />
<br />
[FUNCTION f_local_bob]<br />
LOCAL.NAME = Bob<br />
SYSMESSAGE &lt;LOCAL.NAME&gt;<br />
RETURN<br /></font></tt>
</p><p><br />
The above functions are identical to the previous ones, except they use LOCAL instead of VAR. This time when you type <b>.F_LOCAL_JOE</b> ingame you will receive "Joe" and "Bob" messages as we originally intended.
</p><p><br />
This is because the LOCALs only exist within the functions that define them. When F_LOCAL_BOB attempted to use LOCAL.NAME it received its own version of the variable that doesn't interfere with the one defined in F_LOCAL_JOE. When F_LOCAL_BOB returns, F_LOCAL_JOE still has its original LOCAL.NAME with "Joe" still stored inside it.
</p><p><br />
Of course there may come a time where you <i>do</i> want to share LOCALs with another function, and this can be accomplished by using the <b>CALL</b> command. When you use the CALL command to run a function instead of running the function directly the LOCALs are shared between both scripts, for example:
</p><p><br />
<tt><font color="darkblue">[FUNCTION f_bla]<br />
LOCAL.DUDE = Bob<br />
RETURN<br />
<br />
[FUNCTION f_bleep]<br />
<b>CALL F_BLA</b><br />
NAME = &lt;LOCAL.DUDE&gt;<br />
RETURN<br /></font></tt>
</p><p><br />
When we run the <b>F_BLEEP</b> function above, the CALL line allows LOCAL.DUDE to be set in F_BLA and be accessible to F_BLEEP afterwards. Therefore, the <tt>NAME = &lt;LOCAL.DUDE&gt;</tt> line will set the name of the object to whatever the F_BLA function set LOCAL.DUDE to (in this case "Bob").
</p><p><br />
Unlike TAGs, CTAGs and VARs, LOCALs <i>do not</i> have a LOCAL0 equivalent. This is because LOCALs will always return 0 when they empty (and so, they can <i>never</i> be blank/empty).
</p><p><br />
</p>
<a name="Floats" id="Floats"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_5&amp;action=edit&amp;section=6" title="Edit section: Floats">edit</a>]</span> <span class="mw-headline">Floats</span></h2>
<p>This is the most simple. Since you know many variables at this point and know how to use them. FLOATs are almost the same as LOCALs, just a difference. LOCALs store only text or entire numbers (34 or 12), while FLOATs stores decimals (23.1 or 45.3). Another difference is the EVAL here is changed to FLOATVAL. This is one example of FLOAT used to calculate hit speed:
</p><p><br />
<tt><font color="darkblue">[EVENTS e_test]<br />
ON=@HitTry<br />
</p>
<dl><dd>FLOAT.FSPEED = &lt;FLOATVAL &lt;SERV.SPEEDSCALEFACTOR&gt; / ((&lt;DEX&gt; + 100) * &lt;ARGO.SPEED&gt; + 1)&gt;<br />
</dd><dd>ARGN1 = &lt;FLOAT.FSPEED&gt;<br /></font></tt>
</dd></dl>
<p><br />
</p>
<a name="Functions" id="Functions"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_5&amp;action=edit&amp;section=7" title="Edit section: Functions">edit</a>]</span> <span class="mw-headline">Functions</span></h2>
<p>What's your [FUNCTION]?
</p><p><br />
The single most powerful SPHERE scripting tool to date.
</p><p><br />
You have a wealth of built-in object functions available to you. However, there seems to be some limits. For example, let's take a look at the following example of a very poorly written script:
</p><p><br />
<tt><font color="darkblue">ON=@DClick<br />
</p>
<dl><dd>SERV.NEWITEM=ispell_7_water_sparkle<br />
</dd><dd>NEW.P = &lt;SRC.TARG.P&gt;<br />
</dd><dd>NEW.LINK = &lt;SRC.UID&gt;<br />
</dd><dd>NEW.MORE = 017a6<br />
</dd><dd>NEW.MOVE -1 -1<br />
</dd><dd>SERV.NEWITEM = ispell_7_water_sparkle<br />
</dd><dd>NEW.P = &lt;SRC.TARG.P&gt;<br />
</dd><dd>NEW.LINK = &lt;SRC.UID&gt;<br />
</dd><dd>NEW.MORE = 017a3<br />
</dd><dd>NEW.MOVE -1 0<br />
</dd><dd>SERV.NEWITEM = ispell_7_water_sparkle<br />
</dd><dd>NEW.P = &lt;SRC.TARG.P&gt;<br />
</dd><dd>NEW.LINK = &lt;SRC.UID&gt;<br />
</dd><dd>NEW.MORE = 017a8<br />
</dd><dd>NEW.MOVE -1 1<br />
</dd><dd>SERV.NEWITEM = ispell_7_water_sparkle<br />
</dd><dd>NEW.P = &lt;SRC.TARG.P&gt;<br />
</dd><dd>NEW.LINK = &lt;SRC.UID&gt;<br />
</dd><dd>NEW.MORE = 0179f<br />
</dd><dd>NEW.MOVE 0 -1<br />
</dd><dd>SERV.NEWITEM = ispell_7_water_sparkle<br />
</dd><dd>NEW.P = &lt;SRC.TARG.P&gt;<br />
</dd><dd>NEW.LINK = &lt;SRC.UID&gt;<br />
</dd><dd>NEW.MORE = 0179b<br />
</dd><dd>NEW.MOVE 0 0<br />
</dd><dd>SERV.NEWITEM = ispell_7_water_sparkle<br />
</dd><dd>NEW.P = &lt;SRC.TARG.P&gt;<br />
</dd><dd>NEW.LINK = &lt;SRC.UID&gt;<br />
</dd><dd>NEW.MORE = 017a1<br />
</dd><dd>NEW.MOVE 0 1<br />
</dd><dd>SERV.NEWITEM = ispell_7_water_sparkle<br />
</dd><dd>NEW.P = &lt;SRC.TARG.P&gt;<br />
</dd><dd>NEW.LINK = &lt;SRC.UID&gt;<br />
</dd><dd>NEW.MORE = 017a5<br />
</dd><dd>NEW.MOVE 1 -1<br />
</dd><dd>SERV.NEWITEM = ispell_7_water_sparkle<br />
</dd><dd>NEW.P = &lt;SRC.TARG.P&gt;<br />
</dd><dd>NEW.LINK = &lt;SRC.UID&gt;<br />
</dd><dd>NEW.MORE = 0179d<br />
</dd><dd>NEW.MOVE 1 0<br />
</dd><dd>SERV.NEWITEM = ispell_7_water_sparkle<br />
</dd><dd>NEW.P = &lt;SRC.TARG.P&gt;<br />
</dd><dd>NEW.MORE = 017a7<br />
</dd><dd>NEW.LINK = &lt;SRC.UID&gt;<br />
</dd><dd>NEW.MOVE 1 1<br />
</dd><dd>RETURN 1<br /></font></tt>
</dd></dl>
<p><br />
Do you notice anything about this script? How about the fact that it's repeating the same few lines over and over? Do you think we could do anything to fix this problem? I thought so too. We need a way to write a set of code once, like this: 
</p><p><br />
<tt><font color="darkblue">SERV.NEWITEM = ispell_7_water_sparkle<br />
NEW.P = &lt;SRC.TARG.P&gt;<br />
NEW.MORE = 017a7<br />
NEW.LINK = &lt;SRC.UID&gt;<br />
NEW.MOVE 1 1<br /></font></tt>
</p><p><br />
And have a way to "call" this code over and over again. I give you.... the [FUNCTION]! 
</p><p><br />
<tt><font color="darkblue">[FUNCTION create_sparkle]<br />
SERV.NEWITEM = ispell_7_water_sparkle<br />
NEW.P = &lt;TARG.P&gt;<br />
NEW.MORE = 017a7<br />
NEW.LINK = &lt;UID&gt;<br />
NEW.MOVE 1 1<br />
</p>
<dl><dd>RETURN<br /></font></tt>
</dd></dl>
<p><br />
And in a script, we could go like this: 
</p><p><br />
<tt><font color="darkblue">ON=@DClick<br />
</p>
<dl><dd>SRC.CREATE_SPARKLE<br />
</dd><dd>SRC.CREATE_SPARKLE<br />
</dd><dd>SRC.CREATE_SPARKLE<br />
</dd><dd>SRC.CREATE_SPARKLE<br />
</dd><dd>SRC.CREATE_SPARKLE<br />
</dd><dd>SRC.CREATE_SPARKLE<br />
</dd><dd>SRC.CREATE_SPARKLE<br />
</dd><dd>SRC.CREATE_SPARKLE<br />
</dd><dd>RETURN 1<br /></font></tt>
</dd></dl>
<p><br />
Once you have learned how to use FOR loops, you could also reduce this script even further to:
</p><p><br />
<tt><font color="darkblue">ON=@DClick<br />
</p>
<dl><dd>FOR 8<br />
<dl><dd>SRC.CREATE_SPARKLE<br />
</dd></dl>
</dd><dd>ENDFOR<br />
</dd><dd>RETURN 1<br /></font></tt>
</dd></dl>
<p><br />
Doesn't that look slightly more pretty than the previous version? We managed to cut about 40 lines down into 3 or so. But do you notice a problem? Our code is fixed. Those items are going to be created and moved 1 square down and one square right, every single time. We need a way to specify some parameters to our function! 
</p><p><br />
And so we have the ARG* commands. There are three types of arguments we can give to a function: numeric, string, or object. I recommend always using the string arguments and using EVAL to get whatever else you need. What variables are associated with these arguments? 
</p><p><br />
ARGN, ARGS, and ARGO respectively. N for "number", S for "string" and O for "object".
</p><p><br />
Let's rewrite our function and event using this new information:
</p><p><br />
<tt><font color="darkblue">[FUNCTION create_sparkle]<br />
SERV.NEWITEM = ispell_7_water_sparkle<br />
NEW.P = &lt;TARG.P&gt;<br />
NEW.MORE = 017a7<br />
NEW.LINK = &lt;UID&gt;<br />
NEW.MOVE &lt;ARGS&gt;<br />
<br />
[SOME ITEMDEF GOES HERE]<br />
<br />
ON=@DClick<br />
</p>
<dl><dd>SRC.CREATE_SPARKLE -1 -1<br />
</dd><dd>SRC.CREATE_SPARKLE -1 0<br />
</dd><dd>SRC.CREATE_SPARKLE -1 1<br />
</dd><dd>SRC.CREATE_SPARKLE 0 -1<br />
</dd><dd>SRC.CREATE_SPARKLE 0 1<br />
</dd><dd>SRC.CREATE_SPARKLE 1 -1<br />
</dd><dd>SRC.CREATE_SPARKLE 1 0<br />
</dd><dd>SRC.CREATE_SPARKLE 1 1<br />
</dd><dd>RETURN 1<br /></font></tt>
</dd></dl>
<p><br />
Get it? Every time we call the function with our new <i>create_sparkle</i> command, we "pass" it the values following the command. SPHERE automatically puts those values in ARGS, without any help from us. 
</p><p><br />
There is another problem with functions that many new scripters do not understand, and that is the concept of the default object. In a normal script, the default object is the object on which the script is being executed. In a @DClick script, it's the item being double-clicked. In an @Equip script, it's the item being equipped. But what are the objects available in a function. Well, it all depends on how you call it. 
</p><p><br />
The default object in a function is the object that called the function. In the case of our above example, SRC called the function, so the SRC becomes the default object. You'll notice that I removed any mention of SRC from the lines inside of the function itself. We could easily have said this instead: 
</p><p><br />
<tt><font color="darkblue">CREATE_SPARKLE<br /></font></tt>
</p><p><br />
Then, the default object would have been the item and SRC would still be SRC. But its a lot easier to see it the other way, at least in my opinion. That way you don't get confused either. If you WERE to include the SRC, and accidentally call your function with something like this: 
</p><p><br />
<tt><font color="darkblue">SRC.ACT.CREATE_SPARKLE // Not a really likely occurrence in this case, but in other cases it is<br /></font></tt> 
</p><p><br />
Then you would no longer have a SRC and you would get a lot of scary errors that would be kinda difficult to track down, since you probably wouldn't think to check the function call. Functions generate enough scary errors as it is when you screw them up. Don't make it worse. &nbsp;:)
</p><p><br />
There is still another problem with my script. It's assigning the same MORE value to each of the newly created items, and as you can see from the original long script, this isn't what I wanted it to do. I wanted each item to have a specific MORE value, which is used elsewhere in the script. So what are we to do? Well there are a number of solutions, but the most obvious would be to utilize that VAR feature we discussed in the previous section. Let's take a look at the completed script: 
</p><p><br />
<tt><font color="darkblue">[FUNCTION create_sparkle]<br />
SERV.NEWITEM = ispell_7_water_sparkle<br />
NEW.P = &lt;TARG.P&gt;<br />
NEW.MORE = &lt;EVAL &lt;VAR.MORE_VALUE&gt;&gt;<br />
NEW.LINK = &lt;UID&gt;<br />
NEW.MOVE &lt;ARGS&gt;<br />
<br />
[SOME ITEMDEF GOES HERE]<br />
<br />
ON=@DClick<br />
</p>
<dl><dd>VAR.MORE_VALUE = 017a6<br />
</dd><dd>SRC.CREATE_SPARKLE -1 -1<br />
</dd><dd>VAR.MORE_VALUE = 017a3<br />
</dd><dd>SRC.CREATE_SPARKLE -1 0<br />
</dd><dd>VAR.MORE_VALUE = 017a8<br />
</dd><dd>SRC.CREATE_SPARKLE -1 1<br />
</dd><dd>VAR.MORE_VALUE = 0179f<br />
</dd><dd>SRC.CREATE_SPARKLE 0 -1<br />
</dd><dd>VAR.MORE_VALUE = 017a1<br />
</dd><dd>SRC.CREATE_SPARKLE 0 1<br />
</dd><dd>VAR.MORE_VALUE = 017a5<br />
</dd><dd>SRC.CREATE_SPARKLE 1 -1<br />
</dd><dd>VAR.MORE_VALUE = 0179d<br />
</dd><dd>SRC.CREATE_SPARKLE 1 0<br />
</dd><dd>VAR.MORE_VALUE = 017a7<br />
</dd><dd>SRC.CREATE_SPARKLE 1 1<br />
</dd><dd>VAR.MORE_VALUE = <br />
</dd><dd>RETURN 1<br /></font></tt>
</dd></dl>
<p><br />
The value of the VAR is carried over, since VAR variables, as we know, are global. We've managed to reduce a 40 line script into a 20 line script and keep the original functionality. And this is only for calling a function 8 times. The more you use a function, the more space it saves later. 
</p><p><br />
And that is my chapter on functions. Later on, we'll see very useful purposes for doing this, other than eliminating a lot of lines of typing.
</p>
<!-- 
NewPP limit report
Preprocessor node count: 480/1000000
Post-expand include size: 3359/2097152 bytes
Template argument size: 593/2097152 bytes
Expensive parser function count: 8/100
-->

<!-- Saved in parser cache with key d00b020c:pcache:idhash:6-0!1!0!!en!2 and timestamp 20120714134502 -->
<div class="printfooter">
Retrieved from "<a href="http://wiki.sphere.torfo.org/index.php/Chapter_5">http://wiki.sphere.torfo.org/index.php/Chapter_5</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/index.php/Special:Categories" title="Special:Categories">Category</a>:&#32;<span dir='ltr'><a href="/index.php/Category:Tutorials" title="Category:Tutorials">Tutorials</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/index.php/Chapter_5" title="View the content page [c]" accesskey="c">Page</a></li>
				 <li id="ca-talk" class="new"><a href="/index.php?title=Talk:Chapter_5&amp;action=edit&amp;redlink=1" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/index.php?title=Chapter_5&amp;action=edit" title="You can edit this page.&#10;Please use the preview button before saving [e]" accesskey="e">Edit</a></li>
				 <li id="ca-history"><a href="/index.php?title=Chapter_5&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>
				 <li id="ca-move"><a href="/index.php/Special:MovePage/Chapter_5" title="Move this page [m]" accesskey="m">Move</a></li>
				 <li id="ca-watch"><a href="/index.php?title=Chapter_5&amp;action=watch" title="Add this page to your watchlist [w]" accesskey="w">Watch</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-userpage"><a href="/index.php/User:Ben" title="Your user page [.]" accesskey="." class="new">Ben</a></li>
				<li id="pt-mytalk"><a href="/index.php/User_talk:Ben" title="Your talk page [n]" accesskey="n" class="new">My talk</a></li>
				<li id="pt-preferences"><a href="/index.php/Special:Preferences" title="Your preferences">My preferences</a></li>
				<li id="pt-watchlist"><a href="/index.php/Special:Watchlist" title="The list of pages you are monitoring for changes [l]" accesskey="l">My watchlist</a></li>
				<li id="pt-mycontris"><a href="/index.php/Special:Contributions/Ben" title="List of your contributions [y]" accesskey="y">My contributions</a></li>
				<li id="pt-logout"><a href="/index.php?title=Special:UserLogout&amp;returnto=Chapter_5" title="Log out">Log out</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://wiki.sphere.torfo.org/images/SphereWiki.png);" href="/index.php/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/index.php/Special:Search" id="searchform"><div>
				<input id="searchInput" name="search" type="text" title="Search SphereWiki [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search the pages for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/index.php/Main_Page">Main Page</a></li>
				<li id="n-recentchanges"><a href="/index.php/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-randompage"><a href="/index.php/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
				<li id="n-SphereServer-Forum"><a href="http://www.sphereserver.net">SphereServer Forum</a></li>
				<li id="n-help"><a href="/index.php/Help:Contents" title="The place to find out">Help</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-Setting_Up_Sphere'>
		<h5>Setting Up Sphere</h5>
		<div class='pBody'>
			<ul>
				<li id="n-Where-To-Get-Sphere"><a href="/index.php/Where_to_get_Sphere">Where To Get Sphere</a></li>
				<li id="n-Installing-Sphere"><a href="/index.php/Installing_Sphere">Installing Sphere</a></li>
				<li id="n-Configuring-Sphere.ini"><a href="/index.php/Configuring_Sphere.ini">Configuring Sphere.ini</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-Reference_Compendium'>
		<h5>Reference Compendium</h5>
		<div class='pBody'>
			<ul>
				<li id="n-Definitions"><a href="/index.php/Category:Definitions">Definitions</a></li>
				<li id="n-Objects"><a href="/index.php/Category:Objects">Objects</a></li>
				<li id="n-Scripts"><a href="/index.php/Category:Scripts">Scripts</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-Tutorial_Chapters'>
		<h5>Tutorial Chapters</h5>
		<div class='pBody'>
			<ul>
				<li id="n-Chapter-One"><a href="/index.php/Chapter_1">Chapter One</a></li>
				<li id="n-Chapter-Two"><a href="/index.php/Chapter_2">Chapter Two</a></li>
				<li id="n-Chapter-Three"><a href="/index.php/Chapter_3">Chapter Three</a></li>
				<li id="n-Chapter-Four"><a href="/index.php/Chapter_4">Chapter Four</a></li>
				<li id="n-Chapter-Five"><a href="/index.php/Chapter_5">Chapter Five</a></li>
				<li id="n-Chapter-Six"><a href="/index.php/Chapter_6">Chapter Six</a></li>
				<li id="n-Chapter-Seven"><a href="/index.php/Chapter_7">Chapter Seven</a></li>
				<li id="n-Chapter-Eight"><a href="/index.php/Chapter_8">Chapter Eight</a></li>
				<li id="n-Chapter-Nine"><a href="/index.php/Chapter_9">Chapter Nine</a></li>
				<li id="n-Chapter-Ten"><a href="/index.php/Chapter_10">Chapter Ten</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/index.php/Special:WhatLinksHere/Chapter_5" title="List of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/index.php/Special:RecentChangesLinked/Chapter_5" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-specialpages"><a href="/index.php/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/index.php?title=Chapter_5&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/index.php?title=Chapter_5&amp;oldid=683" title="Permanent link to this version of the page">Permanent link</a></li>			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 26 November 2010, at 16:16.</li>
					<li id="viewcount">This page has been accessed 6,684 times.</li>
					<li id="privacy"><a href="/index.php/SphereWiki:Privacy_policy" title="SphereWiki:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/index.php/SphereWiki:About" title="SphereWiki:About">About SphereWiki</a></li>
					<li id="disclaimer"><a href="/index.php/SphereWiki:General_disclaimer" title="SphereWiki:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Piwik -->
<script type="text/javascript">
var pkBaseURL = (("https:" == document.location.protocol) ? "https://sphere.torfo.org/piwik/" : "http://sphere.torfo.org/piwik/");
document.write(unescape("%3Cscript src='" + pkBaseURL + "piwik.js' type='text/javascript'%3E%3C/script%3E"));
</script><script type="text/javascript">
try {
var piwikTracker = Piwik.getTracker(pkBaseURL + "piwik.php", 4);
piwikTracker.trackPageView();
piwikTracker.enableLinkTracking();
} catch( err ) {}
</script>
<!-- End Piwik Tag -->
<!-- Served in 0.562 secs. --></body></html>
