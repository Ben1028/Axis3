<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.14.0" />
		<meta name="keywords" content="Chapter 8,De:Chapter 8,En:Chapter 8,Chapter 8,Es:Chapter 8,Fr:Chapter 8,Ja:Chapter 8,Tr:Chapter 8,Wiki Translation,Third Party Tools" />
		<link rel="alternate" type="application/x-wiki" title="Edit" href="http://wiki.sphere.torfo.org/index.php?title=Chapter_8&amp;action=edit" />
		<link rel="edit" title="Edit" href="http://wiki.sphere.torfo.org/index.php?title=Chapter_8&amp;action=edit" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="SphereWiki (en)" />
		<link rel="alternate" type="application/rss+xml" title="SphereWiki RSS Feed" href="http://wiki.sphere.torfo.org/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="SphereWiki Atom Feed" href="http://wiki.sphere.torfo.org/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Chapter 8 - SphereWiki</title>
		<link rel="stylesheet" href="/skins/common/shared.css?195" type="text/css" media="screen" />
		<link rel="stylesheet" href="/skins/common/commonPrint.css?195" type="text/css" media="print" />
		<link rel="stylesheet" href="/skins/monobook/main.css?195" type="text/css" media="screen" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE50Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/skins/monobook/IE55Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/skins/monobook/IE60Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/skins/monobook/IE70Fixes.css?195" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" />
		<link rel="stylesheet" href="/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" media="print" />
		<link rel="stylesheet" href="/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" />
		<link rel="stylesheet" href="/index.php?title=-&amp;action=raw&amp;maxage=18000&amp;smaxage=0&amp;ts=20120630142713&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/skins/common/IEFixes.js?195"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/skins";
		var wgArticlePath = "/index.php/$1";
		var wgScriptPath = "";
		var wgScript = "/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://wiki.sphere.torfo.org";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Chapter_8";
		var wgTitle = "Chapter 8";
		var wgAction = "view";
		var wgArticleId = "10";
		var wgIsArticle = true;
		var wgUserName = "Ben";
		var wgUserGroups = ["*", "user", "autoconfirmed"];
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = "686";
		var wgVersion = "1.14.0";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		var wgAjaxWatch = {"watchMsg": "Watch", "unwatchMsg": "Unwatch", "watchingMsg": "Watching...", "unwatchingMsg": "Unwatching..."};
		/*]]>*/</script>

		<script type="text/javascript" src="/skins/common/wikibits.js?195"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/skins/common/ajax.js?195"></script>
		<script type="text/javascript" src="/skins/common/ajaxwatch.js?195"></script>
		<script type="text/javascript" src="/index.php?title=-&amp;action=raw&amp;smaxage=0&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Chapter_8 skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
				<h1 id="firstHeading" class="firstHeading">Chapter 8</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From SphereWiki</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<div style="margin: 0px; padding: 2px 2px 0px 2px; border: none; border-collapse:collapse; clear:both;">
<span style="float:right; font-weight:normal; font-size: x-small;"><a href="/index.php/Wiki_Translation" title="Wiki Translation">Help</a></span><div style="background-color:#e9e9e9; border-style:solid; border-width:1px; border-color:#aaa; padding: 0pt 4pt 8pt 4pt; font-size: 95%; text-align:center;"><b>Available languages</b></div>
<div style="border: 1px solid #aaa; background-color: #f9f9f9; border-collapse:collapse; font-size: 95%; padding: 2pt 4pt 2pt 4pt; margin: 0px;">          • <span lang="en"><strong class="selflink">English</strong></span>                                         
</div>
</div>
<div class="NavFrame" style="border:none; clear:none; margin: 0px; padding-top: 0px;">
<div class="NavHead" style="background-color:#e9e9e9; border-style:solid; border-width:1px; border-color:#aaa; margin: 0px; padding: 0pt 4pt 8pt 4pt; font-size: 95%;"><b>Missing languages</b></div>
<div class="NavContent" style="border: 1px solid #aaa; background-color: #f9f9f9; border-collapse:collapse; font-size: 95%; padding: 2pt 4pt 2pt 4pt;">        • <span lang="de"><a href="/index.php?title=De:Chapter_8&amp;action=edit&amp;redlink=1" class="new" title="De:Chapter 8 (page does not exist)">Deutsch</a></span>    • <span lang="es"><a href="/index.php?title=Es:Chapter_8&amp;action=edit&amp;redlink=1" class="new" title="Es:Chapter 8 (page does not exist)">Español</a></span>    • <span lang="fr"><a href="/index.php?title=Fr:Chapter_8&amp;action=edit&amp;redlink=1" class="new" title="Fr:Chapter 8 (page does not exist)">Français</a></span>           • <span lang="ja"><a href="/index.php?title=Ja:Chapter_8&amp;action=edit&amp;redlink=1" class="new" title="Ja:Chapter 8 (page does not exist)">日本語</a></span>                  • <span lang="tr"><a href="/index.php?title=Tr:Chapter_8&amp;action=edit&amp;redlink=1" class="new" title="Tr:Chapter 8 (page does not exist)">Türkçe</a></span>     
</div>
</div><div class="NavFrame" style="border:none;display:none;"></div>
<p><br />
</p>
<table id="toc" class="toc" summary="Contents"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Skill_Menus"><span class="tocnumber">1</span> <span class="toctext">Skill Menus</span></a></li>
<li class="toclevel-1"><a href="#Menus"><span class="tocnumber">2</span> <span class="toctext">Menus</span></a></li>
<li class="toclevel-1"><a href="#InsideUO"><span class="tocnumber">3</span> <span class="toctext">InsideUO</span></a></li>
<li class="toclevel-1"><a href="#Gumps"><span class="tocnumber">4</span> <span class="toctext">Gumps</span></a>
<ul>
<li class="toclevel-2"><a href="#Part_1"><span class="tocnumber">4.1</span> <span class="toctext">Part 1</span></a></li>
<li class="toclevel-2"><a href="#Part_2"><span class="tocnumber">4.2</span> <span class="toctext">Part 2</span></a></li>
<li class="toclevel-2"><a href="#Part_3"><span class="tocnumber">4.3</span> <span class="toctext">Part 3</span></a>
<ul>
<li class="toclevel-3"><a href="#Using_DOrigin"><span class="tocnumber">4.3.1</span> <span class="toctext">Using DOrigin</span></a></li>
<li class="toclevel-3"><a href="#Dynamic_Dialogs_using_Loops_and_Functions"><span class="tocnumber">4.3.2</span> <span class="toctext">Dynamic Dialogs using Loops and Functions</span></a></li>
<li class="toclevel-3"><a href="#Dynamic_Buttons"><span class="tocnumber">4.3.3</span> <span class="toctext">Dynamic Buttons</span></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</td></tr></table><script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
<a name="Skill_Menus" id="Skill_Menus"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_8&amp;action=edit&amp;section=1" title="Edit section: Skill Menus">edit</a>]</span> <span class="mw-headline">Skill Menus</span></h2>
<p>One of the most common requests by newbie admins is the ability to create new things via the craft skills. I've noticed that it is also one of the first things that players check out about a shard. If your shard has awesome craftable items, chances are the player will stick around longer and gain skill so he can see them. Craftable houses are the ultimate in cool. And this section will show you how to make one. First, we'll just look at how the crafting system works.
</p><p><br />
There are about 9 built-in section names, for each of the various crafting skills. This script is called from within the server, and if those sections don't exist, you will receive many scary errors. Here is the list, which I grabbed from the top of sphereskill.scp.
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">// Hard coded ref names: (called directly form server)
// sm_alchemy = dclick on alch tools
// sm_summon
// sm_polymorph = polymorph menus
// sm_cartography = dclick on blank map
// sm_bowcraft = knife on wood
// sm_bolts = dclick on arrows or shafts
// sm_blacksmith = dclick on tool
// sm_carpentry = dclick on carp tool
// sm_tailor_leather = dclick on sewing kit
// sm_tailor_cloth
// sm_tinker = dclick on tinker tools.
// sm_inscription = dclick on blank scroll
// sm_cook =&nbsp;??? NOT USED YET
</pre>
<p><br />
Here is the syntax of a SKILLMENU section, like every other section in a SPHERE script: 
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[SKILLMENU sm_alchemy]
</pre>
<p><br />
Now, a skill menu is the little box that pops up that contains the pictures of the items that you can scroll through and select. There are several attributes of this box which obviously need defined. The first is the title. It goes immediately underneath the [SKILLMENU] tag. 
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[SKILLMENU sm_alchemy]
What sort of potion do you want to make?
</pre>
<p><br />
That line will be displayed across the top of the menu, as the title. In the case of the alchemy skill, we simply want to ask the user what type of potion he wishes to make. The next parts of the script are a little shaky, and contain some new constructs that you may or may not recognize. In reality, it's just a series of events, which occur depending on which menu item the user picks. Here's the part of the rest of the alchemy script: 
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[SKILLMENU sm_alchemy]
What sort of potion do you want to make?

ON=i_potion_Agility &lt;name&gt; (&lt;resmake&gt;)
    MAKEITEM=i_potion_Agility
    
ON=i_potion_AgilityGreat &lt;name&gt; (&lt;resmake&gt;)
    MAKEITEM=i_potion_AgilityGreat
    
ON=i_potion_CureLess &lt;name&gt; (&lt;resmake&gt;)
    MAKEITEM=i_potion_CureLess
    
ON=i_potion_Cure &lt;name&gt; (&lt;resmake&gt;)
    MAKEITEM=i_potion_Cure
    
ON=i_potion_CureGreat &lt;name&gt; (&lt;resmake&gt;)
    MAKEITEM=i_potion_CureGreat
    
ON=i_potion_ExplosionLess &lt;name&gt; (&lt;resmake&gt;)
    MAKEITEM=i_potion_ExplosionLess
    
ON=i_potion_Explosion &lt;name&gt; (&lt;resmake&gt;)
    MAKEITEM=i_potion_Explosion
    
ON=i_potion_ExplosionGreat &lt;name&gt; (&lt;resmake&gt;)
    MAKEITEM=i_potion_ExplosionGreat
    
ON=i_potion_HealLess &lt;name&gt; (&lt;resmake&gt;)
    MAKEITEM=i_potion_HealLess
</pre>
<p><br />
As you can see, we still use the ON= event construction for these menus as well. The different is what follows. Let's dissect it:
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">ON=i_potion_HealLess &lt;name&gt; (&lt;resmake&gt;)
</pre>
<p><br />
This line tells the server a number of things. The first parameter, immediately following the = sign, is the ID of the item to display. So, what will be displayed here is the DISPID of the i_potion_HealLess item. It happens to be a yellow potion. As soon as you specify this item, it becomes the default item for the rest of that line. The server knows that <tt>&lt;NAME&gt;</tt> refers to the name of the potion item, and that <tt>&lt;RESMAKE&gt;</tt> is a string which tells what it takes to make that item. Both of those are specified in the script for i_potion_HealLess (which is in sphere_item_provisions_potions.scp) and can easily be changed there (looks for NAME= to change the name and SKILLMAKE= to change the skill and difficulty). 
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">MAKEITEM=i_potion_HealLess
</pre>
<p><br />
Well if this isn't obvious, you shouldn't be reading this chapter. It simply begins the construction of the specific item. Wait, you may be asking, how does the server know which skill to use or how much skill is required, or even what to consume (1 empty bottle) when creating this item. Well, I'm glad you asked. To answer that, we need to look at the script for the item we're constructing. Ah, here it is....
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[ITEMDEF i_potion_HealLess]
NAME=Lesser Heal
ID=i_bottle_YELLOW
RESOURCES=i_reag_ginseng, i_bottle_EMPTY
SKILLMAKE=ALCHEMY 0.1
TYPE=T_POTION
TDATA1=i_bottle_empty

ON=@Create
    MORE1 = s_heal
    MORE2 = 50.0
</pre>
<p><br />
The two important lines are the <b>RESOURCES</b> and <b>SKILLMAKE</b> lines. These two lines work with the skill system to tell SPHERE what items are used to make this item. Basically, it says that when you create the item, you need 1 i_reag_ginseng and 1 i_bottle_empty. Incidentally, if you don't have the resources to make an item, it won't even appear on the list when you look at the SKILLMENU in-game. The next line tells the server which and how much skill is required to make this item. In this case, it says we need 0.1 in the alchemy skill. It IS just a lesser heal, after all. 
</p><p><br />
Take your new i_potion_HealLess to a store and try to sell it. Magically, it seems to have a price. Where did that price come from? Well, it came from the RESOURCES. The value of a lesser heal potion is the combined value of the i_reag_ginseng and the i_bottle_EMPTY. Both of these are defined in sphere_item_resources.scp. This brings us to a point so important, I am going to put it in bold: <b>An item MUST have either a VALUE or resources with a VALUE, or it will not appear in a SKILLMENU!</b> Many newbie scripters ask on the boards about why their item is not appearing in an otherwise perfect SKILLMENU section. It has nothing to do with the SKILLMENU. Look at your item scripts before whining to us on the boards. 
</p><p><br />
Another important point is this: You may have any number of lines between ON= events in a [SKILLMENU] section. It just happens that MAKEITEM does everything for us that we need it to do, so most scripts only have one line. However, you could print out a SYSMESSAGE or KILL a player within a SKILLMENU, just as easily as you could do it in any other event. 
</p><p><br />
Now that we know this fact, let's build that craftable house I was referring to! First, we need to figure out what sort of RESOURCES we might want to use to craft a house. I would say a large amount of wood, maybe some metal for a doorknob, a deed to write on, and some magic just for the heck of it. We'll take a resources like that looks like this: 
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">RESOURCES=1000 i_board, 100 i_ingot_iron, 5 i_reag_garlic, i_deed
</pre>
<p><br />
We also need a SKILLMAKE definition, and for this we'll use the Carpentry skill. Say, 95.0. Then we'll put those lines into the ITEMDEF for the deed we want to make craftable: 
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[ITEMDEF i_craftable_deed]
ID=i_deed
NAME=Deed to a Small Stone House
RESOURCES=1000 i_board, 100 i_ingot_iron, 5 i_reag_garlic, i_deed
SKILLMAKE=CARPENTRY 95.0

CATEGORY=Provisions - Deeds
SUBSECTION=House Deeds
DESCRIPTION=Small Stone House

ON=@Create
    MORE1 = i_multi_house_stone_small
</pre>
<p><br />
This, if you haven't figured it out, is a copy of item 04202, which has been renamed and edited. You can find the original script in sphere_item_deed.scp. Now, our item has a SKILLMAKE definition, and a VALUE definition (through the RESOURCES). It is craftable. We need to stick it into one of the existing Carpentry [SKILLMENU] sections now. Let's look at one of them: 
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[SKILLMENU sm_carpentry]
Carpentry

ON=i_board boards
    MAKEITEM=i_board
    
ON=i_chair_throne Chairs
    SKILLMENU=sm_wood_chairs
    
ON=i_chest_wooden_brass Containers &amp; Shields
    SKILLMENU=sm_wood_containers_shields
    
ON=i_table_nightstand Table
    SKILLMENU=sm_wood_tables
    
ON=i_staff_gnarled Weapons &amp; Tools
    SKILLMENU=sm_wood_weapons_tools
    
ON=i_armoir_dk Furniture
    SKILLMENU=sm_wood_furniture
    
ON=i_portrait_7 Paintings
    SKILLMENU=sm_wood_paintings
    
ON=i_trophy_deerhead Trophies
    SKILLMENU=sm_wood_trophies
    
ON=i_saddle Rancher Types
    SKILLMENU=sm_wood_rancher
    
ON=i_BED_9 Beds
    SKILLMENU=sm_wood_beds
    
ON=i_bulletin_board Miscellaneous
    SKILLMENU=sm_wood_misc
</pre>
<p><br />
Like I said earlier, you can have any lines after an ON= section. In this case, it just happens to be a SKILLMENU line which opens up another menu. This is a hierarchical menu, because you choose from upper menu options like these, and go through lower menus, until you finally reach an item you can craft. Now, we're going to add the following two lines to the end of this script:
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">ON=i_craftable_deed &lt;name&gt; (&lt;resmake&gt;)
    MAKEITEM=i_craftable_deed
</pre>
<p><br />
Guess what? We're done. That's all you need to do. Now, in most cases, you would make a new [SKILLMENU sm_houses] or something similar, and then add all of your items to that. In that case, the line you'd add to the main Carpentry menu (or one of the submenus) is the following:
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">ON=i_deed Craftable Houses
    SKILLMENU=sm_houses
</pre>
<p><br />
That's all. Easy, isn't it? It's one of the easiest things to script, and one of the coolest. Unfortunately, it is so easy and repetitive that it takes FOREVER to make a good crafting system. If you are going to create one for your shard, start now. You should be finished in about a month.&nbsp;:)
</p><p><br />
</p>
<a name="Menus" id="Menus"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_8&amp;action=edit&amp;section=2" title="Edit section: Menus">edit</a>]</span> <span class="mw-headline">Menus</span></h2>
<p>If you paid attention in the previous section, this section should be very simple for you. It is so much easier to make a simple menu than a skillmenu. And, when you see how to read from buttons in a GUMP, you will see how similar it is to this. Basically, in SPHERE, there are occasions when you may want to bring up a menu for the user to choose from. Say, when they choose the "Help Desk from Hell" option on your help menu. 
</p><p><br />
Do that. Right now. See how a menu pops up and asks if the user really wants to go to the help desk from hell? He can choose Yes, or No, and something different will happen in each case. Here's what the script for that menu might look like: 
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[MENU m_helpdesk]
Do you REALLY want to go to the Help Desk from Hell?  You will be stuck until a GM comes to free you!

ON=0 Yes
    SRC.GO Help Desk from Hell
    
ON=0 No
    SRC.SYSMESSAGE Help request cancelled.
    
ON=0 I'm a monkey.  Kill me.
    SRC.KILL
</pre>
<p><br />
It looks awfully familiar, doesn't it? Here's what each part does. (I'll only take the first four lines, because the next ones are self-explanatory if you understand the first four.
</p><p><br />
<b>[MENU m_helpdesk]</b><br />
This is rather obvious. In a script, you would call this menu like this:
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">MENU m_helpdesk
</pre>
<p><br />
Difficult eh? &nbsp;:) 
</p><p><br />
<b>Do you REALLY want</b>...<br />
Like the skillmenu, this is the title of this section. The next thing I am about to discuss will determine where it is displayed. 
</p><p><br />
<b>ON=0 Yes</b><br />
Aha, this is the new part. Remember what the first parameter to this section in a [SKILLMENU] was? Well, it's the same thing. That is the ITEM ID that the menu is supposed to display. However, we don't want a scrolling item-based menu, but rather a menu where we can select an option from a list. When you put a 0 for the ITEM ID, SPHERE will automatically assume that you want to create a text-based MENU. However, the catch is, you must put 0 for EVERY SINGLE OPTION in your menu, or else you will get a scrolling item menu like a SKILLMENU. In our case, we want to give the user options in text format, because our menu wouldn't make much sense with scrolling items for its purposes. 
</p><p><br />
<b>SRC.GO Help Desk of Hell</b><br />
You know what this does. I just want to point out that the user of the menu is SRC, and the default object is whatever the MENU was called upon.
</p><p><br />
That's about all it takes to make a menu. Of course, you can put any commands you want after the <i>ON=</i> section, and there can be much more than one line. In fact, for most menus, there will be. That was easy, wasn't it?&nbsp;:)
</p><p><br />
</p>
<a name="InsideUO" id="InsideUO"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_8&amp;action=edit&amp;section=3" title="Edit section: InsideUO">edit</a>]</span> <span class="mw-headline">InsideUO</span></h2>
<p>UO comes with almost 4000 gumps. You aren't going to want to try each one in a script until you figure out which is which. You're going to need some sort of a program that shows you the gump. That program is InsideUO, which has come to be as useful to SPHERE scripting as a sword to a warrior. Here's a link to download it:
</p><p><br />
<a href="http://uo.stratics.com/heptazane/insideuo/index.shtml" class="external text" title="http://uo.stratics.com/heptazane/insideuo/index.shtml" rel="nofollow">Download InsideUO</a>
</p><p><br />
It's a zip file so you need WinZip or a similar tool to extract it. Unzip it to your main SPHERE directory (where SphereSvr.exe is). If you are running a Linux server, just unzip it to somewhere on your Windows computer. It doesn't run in Linux, sorry. Now, when you run the program, you will need to enter the paths of your MUL files. In most cases, that's your the folder where you installed UO (hopefully). Go to the View menu and select File Paths. Sometimes, it will automatically detect the location of your files, in which case you don't have to do anything.
</p><p><br />
Now, click on the GUMPS button along the sidebar and wait for it to load the index file. It will have a huge list of gumps from 00000001 to some other large number. Look down through them, write some interesting ones down, because you won't want to search back through the list every time you need a specific gump ID.
</p><p><br />
Also, you're going to be needing backgrounds, which come in 9 parts. I'll explain that when we get there, but if you see a series of items, which look like they'd fit together, write that down, because it would make an excellent background.
</p><p><br />
One more thing to note before we move on to the next section: The gump IDs you see here are in HEXADECIMAL. SPHERE will only accept gump IDs in decimal. This is one of those times when you need to break out the Windows Calculator and do some conversions. 
</p><p><br />
<b>Note:</b> InsideUO is a popular tool for viewing the contents of the UO files but it is not the only one out there. Check out the <a href="/index.php?title=Third_Party_Tools&amp;action=edit&amp;redlink=1" class="new" title="Third Party Tools (page does not exist)">Third Party Tools</a> page for a list of other programs which you may want to use.
</p><p><br />
</p>
<a name="Gumps" id="Gumps"></a><h2><span class="editsection">[<a href="/index.php?title=Chapter_8&amp;action=edit&amp;section=4" title="Edit section: Gumps">edit</a>]</span> <span class="mw-headline">Gumps</span></h2>
<p>Congratulations. If you've made it this far, you're way past where many scripters reach. Unfortunately, this is also where many scripters hit a brick wall. Gump scripting, especially gump designing, is one of the hardest things for a scripter to do. Rather than easy-to-remember scripting commands such as REMOVE and NEWITEM, you get cryptic looking strings of letters and numbers, which are made even more complex when they use variables. Due to the difficulty, I've split the Gump Scripting 101 section into three parts. The first part shows the setup and syntax of some of the commands. The second part shows the rest of them. The third part will explain some more advanced techniques that can be used to create dynamic dialogs using relative coordinates, loops and dynamic buttons.
</p><p><br />
</p>
<a name="Part_1" id="Part_1"></a><h3><span class="editsection">[<a href="/index.php?title=Chapter_8&amp;action=edit&amp;section=5" title="Edit section: Part 1">edit</a>]</span> <span class="mw-headline">Part 1</span></h3>
<p>First, we need to look at the setup of a gump script, which is different than any script you've seen so far. The tag SPHERE uses to recognize a gump script is <b>DIALOG</b>. I will use the words dialog and gump interchangeably throughout these sections. Unfortunately, GUMPs come in three parts: The dialog itself, the strings that go into the dialog, and the button responses. Those couldn't all be in one section, so SPHERE has divided things up like this: 
</p><p><br />
</p>
<pre style="color: darkgreen; font-family: monospace; border: none;">[DIALOG d_test_dialog]
... Code for the dialog layout goes here ...

[DIALOG d_test_dialog TEXT]
... The text that will be displayed in the dialog goes here ...

[DIALOG d_test_dialog BUTTON]
... The events that are triggered when buttons are pressed goes here ...
</pre>
<p><br />
Now, dialogs are made up of a number of different types of objects. You can have text boxes, buttons, checkboxes, text entry boxes (which you can change), and other various other things. They're each identified with a syntax that looks a lot like a function call. Here is the list of all the commands you can use with dialogs. I'll explain each of them in detail later.
</p><p><br />
<b>Dialog Objects</b><br />
</p>
<pre style="color: darkgreen; font-family: monospace; border: none;">resizepic &lt;x&gt; &lt;y&gt; &lt;gumpback&gt; &lt;width&gt; &lt;height&gt;                                // can come first if multi page. put up some background gump
dorigin &lt;x&gt; &lt;y&gt;                                                                                              // Sets a dynamic origin point
checkertrans &lt;x&gt; &lt;y&gt; &lt;width&gt; &lt;height&gt;                                                                        // add a trasparent layer (only for clients &gt;= 3)
gumppic &lt;x&gt; &lt;y&gt; &lt;gump&gt; &lt;hue&gt;                                                                                 // put gumps in the dlg. (hue only for clients &gt;= 3, otherwise ignored)
gumppictiled &lt;x&gt; &lt;y&gt; &lt;width&gt; &lt;height&gt; &lt;gump&gt;                                                                 // tile a gump
tilepic &lt;x&gt; &lt;y&gt; &lt;item&gt;                                                                                       // put item tiles in the dlg.
tilepichue &lt;x&gt; &lt;y&gt; &lt;item&gt; &lt;hue&gt;                                                                              // put colored item tiles in the dlg.
text &lt;x&gt; &lt;y&gt; &lt;color&gt; &lt;stringindex&gt;                                                                           // put some text here.
dtext &lt;x&gt; &lt;y&gt; &lt;color&gt; &lt;text&gt;                                                                                 // put some text here.
croppedtext &lt;x&gt; &lt;y&gt; &lt;width&gt; &lt;height&gt; &lt;color&gt; &lt;stringindex&gt;
dcroppedtext &lt;x&gt; &lt;y&gt; &lt;width&gt; &lt;height&gt; &lt;color&gt; &lt;text&gt;
htmlgump &lt;x&gt; &lt;y&gt; &lt;width&gt; &lt;height&gt; &lt;stringindex&gt; &lt;hasbackgroud&gt; &lt;hasscrollbar&gt;                                // add an html gump that show a text
dhtmlgump &lt;x&gt; &lt;y&gt; &lt;width&gt; &lt;height&gt; &lt;hasbackgroud&gt; &lt;hasscrollbar&gt; &lt;text&gt;                                      // add an html gump that show a text
xmfhtmlgump &lt;x&gt; &lt;y&gt; &lt;width&gt; &lt;height&gt; &lt;clilocid&gt; &lt;hasbackgroud&gt; &lt;hasscrollbar&gt;                                // add an html gump that show a cliloc text
button &lt;x&gt; &lt;y&gt; &lt;Down_gump&gt; &lt;Up_gump&gt; &lt;pressable(1/0)&gt; &lt;pagedest&gt; &lt;id&gt;
buttontileart &lt;x&gt; &lt;y&gt; &lt;up_gump&gt; &lt;down_gump&gt; &lt;pressable&gt; &lt;page&gt; &lt;id&gt; &lt;tileid&gt; &lt;tilehue&gt; &lt;x offset&gt; &lt;y offset&gt; // Add a button with tileart.
textentry &lt;x&gt; &lt;y&gt; &lt;width&gt; &lt;height&gt; &lt;color&gt; &lt;id&gt; &lt;startstringindex&gt;                                           // Height should be 20
dtextentry &lt;x&gt; &lt;y&gt; &lt;width&gt; &lt;height&gt; &lt;color&gt; &lt;startstringindex&gt; &lt;text&gt;                                        // Height should be 20
textentrylimited &lt;x&gt; &lt;y&gt; &lt;width&gt; &lt;height&gt; &lt;color&gt; &lt;id&gt; &lt;startstringindex&gt; &lt;limit&gt;                            // Textentry with a limit of characters
dtextentrylimited &lt;x&gt; &lt;y&gt; &lt;width&gt; &lt;height&gt; &lt;color&gt; &lt;id&gt; &lt;limit&gt; &lt;text&gt;                                       // Textentry with a limit of characters
tooltip &lt;clilocid&gt;                                                                                           // popup a tooltip over a gump object (only for clients &gt;= 4)
radio &lt;x&gt; &lt;y&gt; &lt;gump1&gt; &lt;gump2&gt; &lt;starting_state&gt; &lt;id&gt;
checkbox &lt;x&gt; &lt;y&gt; &lt;gumpcheck&gt; &lt;gumpuncheck&gt; &lt;starting_state&gt; &lt;checkid&gt;
page &lt;page_number&gt;                                                                                           // for multi tab dialogs.
group                                                                                                        // used to group groups of radio buttons - Group 1, Group 2, etc.
nomove                                                                                                       // The gump cannot be moved around.
noclose                                                                                                      // The gump cannot be closed
nodispose                                                                                                    // not really used  (modal?)Yes, those look complicated now, and if you want to stick with easier scripting for a while, I don't blame you. As you can see, we have all of the required objects to make a nice form, like on a website, or even to make a website-type interface. I'll show you in a later chapter how make hidden buttons and such things like that. It's not as hard as it seems.
</pre>
<p><br />
Now, we have to discuss design. All gumps should start out like this: 
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[DIALOG d_test_gump]
0,0
page 0
... Some objects here ...
page 1
... More objects here ...
</pre>
<p><br />
0,0 is the position that the dialog will start on the screen. 0,0 means this dialog will appear with its upper left corner in the upper left corner of the game screen. It is possible to make a dialog start elsewhere, but it is really pointless unless the dialog is small.
</p><p><br />
Dialogs are divided into pages, and only one page can be displayed at a given time. I'll show you later how to switch between pages with buttons. However, page 0 is always displayed under the other pages. If you have something that you don't want to change between pages (like a background or a title on top of the gump), you put it on page 0. Otherwise, it goes on another page. Page 1 is displayed by default when a dialog appears.
</p><p><br />
Now, let's add a background to our gump. Since it's something we want to stay, we'll put it in page 0. Open up your InsideUO and we'll find a good background. The piece that you're looking for is that top left corner piece. (Most things in gumps deal with the top left corner of an object.) Find the one numbered A3C in the gump list of InsideUO. That's the background we're going to use. Actually this is a background you'll use a lot, because it's plain black with a gold border. Translating that number into hexadecimal, we get 2620. Remember that number, it's important.
</p><p><br />
The command used for backgrounds is resizepic. Look at the chart above, and you'll see what information we need to give it for a resizepic: an x coordinate, a y coordinate, a gump id, a width, and a height. We have all of those things. We'll put it at (0,0) for coordinates, and let's say we make it 500 width and 300 height. Here's the new script: 
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[DIALOG d_test_gump]
0,0
page 0
resizepic 0 0 2620 500 300
page 1
</pre>
<p><br />
That's all. Now put that into a script and type <font color="darkred">.dialog d_test_gump</font> in-game. You'll see that we have a nice black background. It's good to be in-game while you're creating gumps, because you can test it after each new addition. Sometimes if you're off by as little as 25 in your coordinates, things will look strange. It's much easier to fix things one at a time than it is to type the entire gump script, then find out you screwed up somewhere.
</p><p><br />
Now, let's add some text to our gump. We'll say "Hello World" because that seems to be the standard for making new things in programming! There are two ways to store text, either inside the dialog or in the TEXT section. If your text is going to be used often, it's better to put it in the [DIALOG d_test_gump TEXT] section so you don't have to edit the same word every single time you want to change it. Otherwise, you can just add the text directly into the main dialog section. Here is an example of both:
</p><p><br />
<b>Using the TEXT section:</b><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[DIALOG d_test_gump TEXT]
&lt;VAR.BLANKLINE&gt;
Hello World
</pre>
<p><br />
Each line has an index, starting with zero. For the first line, I always like to make a string that will evaluate to nothing, because sometimes you want empty text. I'll show you why later. Also, it makes it easier to think of your first line of text as 1 rather than 0. In our case, because Hello World is in position 1, we refer to it with text id 1. Here's what the whole script will look like now. Obviously, we're going to use that text object from the chart. We will put it at (50,50) and give it a color of 1152 (which happens to be white). We're also going to put it in page 1, because we don't want it to be there forever. Actually, I'll show you something else while we're at it.
</p><p><br />
<b>Using text inside the main gump:</b><br />
It's much simpler than adding it to the TEXT section. Just use the <tt>dtext</tt> object:<br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">dtext 50 50 1152 Hello World
</pre>
<p><br />
Much simpler! I'll be using both examples from here on. Here's what our whole script looks like now: 
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[DIALOG d_test_gump]
0,0
page 0
resizepic 0 0 2620 500 300
page 1
dtext 50 50 1152 Hello World
text 50 70 3 1

[DIALOG d_test_gump TEXT]
&lt;LOCAL.BLANKLINE&gt;
Hello World

[DIALOG d_test_gump BUTTON]
// Nothing here yet!
</pre>
<p><br />
See how easy it is to add text? You can also reuse text by using the same text id. If you look at this dialog in-game, you'll see that "Hello World" is written twice, because we have two text objects with Hello World. The second one is displayed 20 pixels (dots on the screen) below the first. As a general rule, all text should be assumed to be 20 pixels in height. (It's actually closer to 16, but some big letters take up more space.)
</p><p><br />
You'll also see that they are in different colors. As a general rule, the color ID for dialog text is the color ID in-game minus 1. So black is 0, dark blue is 1, etc. New colors (like my hues.mul colors) will not display in any expected manner in a dialog, so stick to the default colors. Also, these colors are in DECIMAL, so you're going to need to convert things again. (Incidentally, color 1152 decimal is 0480 hexadecimal which happens to be that ice-blue color on an item.)
</p><p><br />
Now that we've added text, we can experiment with a button. Obviously, we're going to use the button object to add a button to our gump. We need a lot of information for this button object, so I'll just copy the definition here for your reference. I'll go over each part in turn.
</p><p><br />
</p>
<pre style="color: darkgreen; font-family: monospace; border: none;">button &lt;x&gt; &lt;y&gt; &lt;gump id (down)&gt; &lt;gump id (up)&gt; &lt;active&gt; &lt;page #&gt; &lt;index&gt;
</pre>
<p><br />
Here is what each does: 
</p>
<table>
<tr>
<td> <b>&lt;x&gt; &lt;y&gt;</b> </td><td> This is the position of the top left corner (see?) of the button image. Try to keep dialog pieces off one another, because they will overlap in the order they are placed in the script. We're going to put our button at (50, 90), right below the second line of text.
</td></tr>
<tr>
<td> <b>&lt;gump id&gt;</b>     </td><td> When you press a button, it changes the picture to show that the button is in a "down" position. For our button IDs, we'll use 9A8 (2472) and 9A9 (2473). This is a red diamond shaped button that is rarely used. It has the same gold border as our background, so it'll look nice. Notice that the order is down, then up. The order of the images is up (2472), down (2473), so we'll have to switch the numbers in our script.
</td></tr>
<tr>
<td> <b>&lt;active&gt;</b>      </td><td> This is a switch determining whether or not the button will return an event (1) or switch pages (0). Until we discuss pages in a later section, this will always be 1. (Thanks Belgar!)
</td></tr>
<tr>
<td> <b>&lt;page #&gt;</b>      </td><td> If the button will be used to switch pages, this is the page that will be displayed. Keep in mind that you should put something on the other page to switch back to the first one. You don't want to frustrate your users with a crappy interface. Put 0 if the button doesn't switch pages.
</td></tr>
<tr>
<td> <b>&lt;index&gt;</b>       </td><td> This is used in responding to events, as we'll see shortly. Make it a high number, probably starting in the thousands. Since this is our first button, we're going to call it button 1000. Index 0 is RESERVED, meaning you shouldn't use it for an ordinary button (we'll see why later).
</td></tr></table>
<p><br />
Here is the whole script now: 
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[DIALOG d_test_gump]
0,0
page 0
resizepic 0 0 2620 500 300
page 1
dtext 50 50 1152 Hello World
text 50 70 3 1
button 50 90 2473 2472 1 0 1000

[DIALOG d_test_gump TEXT]
&lt;LOCAL.BLANKLINE&gt;
Hello World

[DIALOG d_test_gump BUTTON]
ON=1000
    SYSMESSAGE You pressed button 1000!
</pre>
<p><br />
Ooh! A new construct! The <b>ON=1000</b> you see in the button section of our dialog is how you respond to a button press. It acts just like any other ordinary event after that line. It means "When the button with ID 1000 is pressed, execute this event." In an ON event, SRC is the player operating the dialog and the default object is whatever the <b>DIALOG</b> command was used on. (On the sidenote, you can also use ONBUTTON= instead of ON=)
</p><p><br />
Thus ends the first section on gumps and dialogs (which are the same thing). With this information you should be able to make just about any sort of gump you want, by playing with text and button positions. The possibilities are almost endless, and after you read Part 2, they will be endless. I have only used the information you will read in Part 2 twice in my entire long scripting career.
</p><p><br />
</p>
<a name="Part_2" id="Part_2"></a><h3><span class="editsection">[<a href="/index.php?title=Chapter_8&amp;action=edit&amp;section=6" title="Edit section: Part 2">edit</a>]</span> <span class="mw-headline">Part 2</span></h3>
<p>You've survived the first part of dialog scripting, and you're well on your way to designing some spectacular gumps I'm sure. OSI has provided us with a huge array of gumps, any of which you may use in your scripting. You might be surprised to see that all of the clothing and paperdoll type items are gumps and are listed with the others in InsideUO (at the bottom). There's even a leather dominatrix type uniform in there, and a whip, but that doesn't seem to have ever been used in UO as an item. Too bad.
</p><p><br />
As you know, no form would be complete without text-boxes to fill in, checkboxes to click, and radio buttons to select from. There is no shortage of gump IDs to use for these purposes, but most of them don't really fit on a normal gump (because they were made for other purposes). What I like to do is use a different background than the one we were using, and then stretch ANOTHER resizepic of the type we were using over top of the first one. Here, look at this example from my messaging system to see what I mean:
</p><p><br />
<tt><font color="darkblue">page 0<br />
resizepic 0 0 5100 640 170<br />
resizepic 15 155 5100 175 40<br />
button 100 161 &lt;eval g_btn_gray_apply&gt; &lt;eval g_btn_gray_apply_press&gt; 1 0 901<br />
button 20 161 5200 5201 1 0 900<br />
text 5 10 1152 1</font><br />
<font color="darkgreen">resizepic 5 30 2620 600 35<br />
textentry 15 36 600 20 1152 1 0 // 4 text fields now</font><br />
<font color="darkred">resizepic 5 57 2620 600 35<br />
textentry 15 63 600 20 1152 2 0</font><br />
<font color="yellow">resizepic 5 84 2620 600 35<br />
textentry 15 90 600 20 1152 3 0</font><br />
<font color="orange">resizepic 5 111 2620 600 35<br />
textentry 15 117 600 20 1152 4 0<br /></font></tt>
</p><p><br />
Don't worry about the name or the TEXT and BUTTON sections. Notice that I have constructed a rather odd gump here. As you can see, for each textentry object, I have another resizepic object. Put this in a script (with the appropriate header tags) and look at it to see what it does.
</p><p><br />
Look carefully at the coordinates, widths, and heights of each highlighted part. If you're going to use this method, there is a particular place that you must position each so the text doesn't overlap other parts of the dialog when the player begins typing. That is called an offset. If one object is at (5, 30), and another is at (15, 36), that is an offset of (10, 6). I've discovered that the (10, 6) offset works well for space between the gold-bordered background and a textentry object.
</p><p><br />
</p>
<pre style="color: darkgreen; font-family: monospace; border: none;">textentry &lt;x&gt; &lt;y&gt; &lt;gump width&gt; &lt;gump height&gt; &lt;color&gt; &lt;index&gt; &lt;text id&gt;
</pre>
<p><br />
Anyways, notice that the text id of each textentry field is 0. By default, the textentry field will be filled with whatever text id you give it. The player would then have to erase that to type something new, and that gets irritating. So, that's why I made the &lt;VAR.BLANKLINE&gt; be text id 0. There is nothing in the box when it appears, which is handy. See? There is rhyme to my reason, you just have to wait a while to get it.
</p><p><br />
You can also use <tt>dtextentry</tt>, which acts similar to dtext and doesn't require something under the TEXT section. See below for an example. 
</p><p><br />
Now, when your gump returns, you're going to get a lot of data from each of those textboxes. Notice how each of them have an index? SPHERE has provided us with a nice variable array (yes, a REAL array) called ARGTXT which contains all of the text returned. You use <tt>ARGTXT[x]</tt> to refer to the text from textentry index x. Here is a full dialog example (actually it's the same one as above, but with some modifications).
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[DIALOG d_test_textentry]
page 0
resizepic 0 0 5100 640 170
resizepic 15 155 5100 175 40
button 100 161 &lt;eval g_btn_gray_apply&gt; &lt;eval g_btn_gray_apply_press&gt; 1 0 901
button 20 161 5200 5201 1 0 900
text 5 10 1152 1
resizepic 5 30 2620 600 35
textentry 15 36 600 20 1152 1 0 // 4 text fields now
resizepic 5 57 2620 600 35
textentry 15 63 600 20 1152 2 0
resizepic 5 84 2620 600 35
textentry 15 90 600 20 1152 3 0
resizepic 5 111 2620 600 35
dtextentry 15 117 600 20 1152 4 // using dtextentry, you can ommit the text or add some as you wish.

[DIALOG d_test_textentry TEXT]
&lt;VAR.BLANKLINE&gt;
Enter the message you wish to send.

[DIALOG d_test_textentry BUTTON]
ON=901 // The apply button
    SRC.SYSMESSAGE You type &lt;ARGTXT[1]&gt; in textentry index 1!
    SRC.SYSMESSAGE You type &lt;ARGTXT[2]&gt; in textentry index 2!
    SRC.SYSMESSAGE You type &lt;ARGTXT[3]&gt; in textentry index 3!
    SRC.SYSMESSAGE You type &lt;ARGTXT[4]&gt; in textentry index 4!
    RETURN 0 // Yes, you can have RETURNs in a dialog
</pre>
<p><br />
This script should work fully. I did remember something while I was typing it, so I'll tell you now. The client depends on the information being sent by SPHERE, which you provide in your script, especially with the [DIALOG TEXT] section. If you refer to a text id that is not there, your client WILL crash. It is easier to crash a client with dialogs than anything else in the game. On my old server, if there was a player I didn't like, I would put an event on his character so a client-crashing gump would appear every time he logged in, no matter what. The GMs used to go crazy trying to fix that.&nbsp;:)
</p><p><br />
My example should help you understand the syntax of getting data from a textentry box. Now you can make forms rather than just still-life dialogs. Remember, you don't need the resizepic background, because a textentry will work no matter what. It just helps the player know where to type.
</p><p><br />
</p>
<a name="Part_3" id="Part_3"></a><h3><span class="editsection">[<a href="/index.php?title=Chapter_8&amp;action=edit&amp;section=7" title="Edit section: Part 3">edit</a>]</span> <span class="mw-headline">Part 3</span></h3>
<p>Here I'm going to add a few tips and tricks to make scripting your dialogs easier, as well as explaining some of the newer features.
</p>
<a name="Using_DOrigin" id="Using_DOrigin"></a><h4><span class="editsection">[<a href="/index.php?title=Chapter_8&amp;action=edit&amp;section=8" title="Edit section: Using DOrigin">edit</a>]</span> <span class="mw-headline">Using DOrigin</span></h4>
<p>DOrigin lets you set a dynamic origin point while still retaining your static origin which you set at the top of the dialog. When setting the x,y coordinates of other elements such as dtext you can specify them as offsets of dorigin rather than using fixed coordinates.
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[DIALOG d_test]
50,50 // This is your static origin point
Page 0

resizepic 0 0 9300 150 100
dtext 10 10 1152 This is a test dialog

dorigin 10 10           // this is your dynamic origin point
dtext *0 *20 100 Test 1 // here I set this text to display at 10x 30y
dtext +50 -0 100 Test 2 // now I offset this text by +50x and keep the same y as the last entry to use *'s. It appears now at 60x 30y
dtext *0 *20 100 Test 3 // here I set the text to display at 10x 50y
dtext +50 -0 100 Test 4 // As with Test 2 it is offset by +50x and same y, so in theory it's really at 60x 50y
dtext *0 *20 100 Test 5 // Same as Test 3 but now at 10x 70y
dtext +50 -0 100 Test 5 // Same as Test 4 but now at 60x 70y
</pre>
<p><br />
What makes this so powerful is that we can now simply copy and paste the last two lines over and over to add more rows without having to each time calculate the x's and y's. This gets especially usefull when you have more than two columns and will prove even more useful when using loops (more on that later). You can now also move the whole "block" of Test text left, right, up or down by simply changing the dorigin. Try it out for yourself, set dorigin to 50 30 and all your text will move 40 right.
</p><p><br />
There are three different ways that you can specify relative coordinates:
</p><p><br />
</p>
<table border="1">
<tr>
<td> <b>Syntax</b> </td><td> <b>Description</b>
</td></tr>
<tr>
<td> -n </td><td> n is subtracted from the origin, the origin point does not change
</td></tr>
<tr>
<td> +n </td><td> n is added to the origin, the origin point does not change
</td></tr>
<tr>
<td> *n </td><td> n is added to the origin, the origin is changed to the new position
</td></tr>
</table>
<p><br />
You can also mix and match different relative and fixed coordinates types. Here are some examples, assuming that DOrigin has been set to 50 50:
</p><p><br />
</p>
<table border="1">
<tr>
<td> <b>Example</b>                   </td><td> <b>Line Result</b>           </td><td> <b>DOrigin Result</b>
</td></tr>
<tr>
<td> dtext -10 -20 100 Text    </td><td> dtext 40 30 100 Text  </td><td> 50 50
</td></tr>
<tr>
<td> dtext +10 +20 100 Text    </td><td> dtext 60 70 100 Text  </td><td> 50 50
</td></tr>
<tr>
<td> dtext *10 *20 100 Text    </td><td> dtext 60 70 100 Text  </td><td> 60 70
</td></tr>
<tr>
<td> dtext *20 100 100 Text    </td><td> dtext 70 100 100 Text </td><td> 70 50
</td></tr>
<tr>
<td> dtext +30 *20 100 Text    </td><td> dtext 80 70 100 Text  </td><td> 50 70
</td></tr>
<tr>
<td> dtext +0 *20 100 Text     </td><td> dtext 50 70 100 Text   </td><td> 50 70
</td></tr></table>
<p><br />
</p>
<a name="Dynamic_Dialogs_using_Loops_and_Functions" id="Dynamic_Dialogs_using_Loops_and_Functions"></a><h4><span class="editsection">[<a href="/index.php?title=Chapter_8&amp;action=edit&amp;section=9" title="Edit section: Dynamic Dialogs using Loops and Functions">edit</a>]</span> <span class="mw-headline">Dynamic Dialogs using Loops and Functions</span></h4>
<p>Lets take the dialog above and see if you can make it shorter in the script but at the same time have 20 lines of Test text! Sounds impossible? Not at all, Sphere can use functions inside dialogs, so anything you can do in a script you can do in a dialog. 
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[DIALOG d_test]
50,50
page 0

resizepic 0 0 9300 150 440
dtext 10 10 1152 This is a test dialog

dorigin 10 10
FOR 20
    dtext *0 *20 100 Test &lt;dLOCAL._FOR&gt;
    dtext +70 -0 100 Test &lt;dLOCAL._FOR&gt;.1
ENDFOR
</pre>
<p><br />
Now imagine that we have to use these FOR loops lots of times inside our whole dialog, or maybe even in more than one dialog. Isn't there an even easier way to do this? Yep there is, using a function:
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[FUNCTION f_test_text]
FOR 20
    dtext *0 *20 100 Test &lt;dLOCAL._FOR&gt;
    dtext +70 -0 100 Test &lt;dLOCAL._FOR&gt;.1
ENDFOR
</pre>
<p><br />
Now we just add it to our dialog, but this time we're going to add a second set of text to the left by creating another dynamic origin point! 
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[DIALOG d_test]
50,50
page 0

resizepic 0 0 9300 350 460
dtext 10 10 1152 This is a test dialog

dorigin 10 10
dtext *0 *20 100 Left Columns
F_TEST_TEXT

dorigin 100 10
dtext *0 *20 Right Columns
F_TEST_TEXT
</pre>
<p><br />
Pretty cool isn't it! This is just the beginning, the rest I'll leave to your scripting talent!&nbsp;:) 
</p><p><br />
</p>
<a name="Dynamic_Buttons" id="Dynamic_Buttons"></a><h4><span class="editsection">[<a href="/index.php?title=Chapter_8&amp;action=edit&amp;section=10" title="Edit section: Dynamic Buttons">edit</a>]</span> <span class="mw-headline">Dynamic Buttons</span></h4>
<p>Lets take the same dialog and function as before and just modify it slightly so it all looks like this: 
</p><p><br />
</p>
<pre style="color: darkblue; font-family: monospace; border: none;">[DIALOG d_test]
50,50
page 0

resizepic 0 0 9300 350 460
dtext 10 10 1152 This is a test dialog

dorigin 10 10
dtext *0 *20 100 Left Columns
F_TEST_TEXT 100

dorigin 200 10
dtext *0 *20 100 Right Columns
F_TEST_TEXT 130

[DIALOG d_test BUTTON]
ON=100 120	// handle button IDs 100 to 120
    SRC.SYSMESSAGE You have pressed button &lt;EVAL (&lt;ARGN1&gt; - 100)&gt; from the left column!
    DIALOG d_test
    
ON=130 150	// handle button IDs 130 to 150
    SRC.SYSMESSAGE You have pressed button &lt;EVAL (&lt;ARGN1&gt; - 100)&gt; from the right column!
    DIALOG d_test
    
[FUNCTION f_test_text]
FOR 20
    button *0 *20 5603 5607 1 0 &lt;EVAL (&lt;LOCAL._FOR&gt; + &lt;ARGN1&gt;)&gt;
    dtext +50 -0 100 Test &lt;dLOCAL._FOR&gt;
ENDFOR
</pre>
<p><br />
As you can see I have added a parameter (aka argument) to the <tt>f_test_text</tt> function. In this case it is to be the button starting range that I want for the button that is replacing one Test text column.
</p><p><br />
In the BUTTON part of the dialog I have regrouped the buttons, from 100-120 will be the 20 buttons of my left column and from 130-150 there will be the my 20 right column buttons. When pressing a button, <tt>&lt;ARGN1&gt;</tt> is the button number, hence using the EVAL in the BUTTON section to find out what the "virtual" button is (the real one remaining &lt;ARGN1&gt;).
</p><p><br />
It's pretty simple and with a bit of playing around you should get this to work easily. Good luck!
</p>
<!-- 
NewPP limit report
Preprocessor node count: 398/1000000
Post-expand include size: 3359/2097152 bytes
Template argument size: 593/2097152 bytes
Expensive parser function count: 8/100
-->

<!-- Saved in parser cache with key d00b020c:pcache:idhash:10-0!1!0!!en!2 and timestamp 20120714134518 -->
<div class="printfooter">
Retrieved from "<a href="http://wiki.sphere.torfo.org/index.php/Chapter_8">http://wiki.sphere.torfo.org/index.php/Chapter_8</a>"</div>
			<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks"><a href="/index.php/Special:Categories" title="Special:Categories">Category</a>:&#32;<span dir='ltr'><a href="/index.php/Category:Tutorials" title="Category:Tutorials">Tutorials</a></span></div></div>			<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/index.php/Chapter_8" title="View the content page [c]" accesskey="c">Page</a></li>
				 <li id="ca-talk" class="new"><a href="/index.php?title=Talk:Chapter_8&amp;action=edit&amp;redlink=1" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-edit"><a href="/index.php?title=Chapter_8&amp;action=edit" title="You can edit this page.&#10;Please use the preview button before saving [e]" accesskey="e">Edit</a></li>
				 <li id="ca-history"><a href="/index.php?title=Chapter_8&amp;action=history" title="Past versions of this page [h]" accesskey="h">History</a></li>
				 <li id="ca-move"><a href="/index.php/Special:MovePage/Chapter_8" title="Move this page [m]" accesskey="m">Move</a></li>
				 <li id="ca-watch"><a href="/index.php?title=Chapter_8&amp;action=watch" title="Add this page to your watchlist [w]" accesskey="w">Watch</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-userpage"><a href="/index.php/User:Ben" title="Your user page [.]" accesskey="." class="new">Ben</a></li>
				<li id="pt-mytalk"><a href="/index.php/User_talk:Ben" title="Your talk page [n]" accesskey="n" class="new">My talk</a></li>
				<li id="pt-preferences"><a href="/index.php/Special:Preferences" title="Your preferences">My preferences</a></li>
				<li id="pt-watchlist"><a href="/index.php/Special:Watchlist" title="The list of pages you are monitoring for changes [l]" accesskey="l">My watchlist</a></li>
				<li id="pt-mycontris"><a href="/index.php/Special:Contributions/Ben" title="List of your contributions [y]" accesskey="y">My contributions</a></li>
				<li id="pt-logout"><a href="/index.php?title=Special:UserLogout&amp;returnto=Chapter_8" title="Log out">Log out</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://wiki.sphere.torfo.org/images/SphereWiki.png);" href="/index.php/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/index.php/Special:Search" id="searchform"><div>
				<input id="searchInput" name="search" type="text" title="Search SphereWiki [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search the pages for this text" />
			</div></form>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/index.php/Main_Page">Main Page</a></li>
				<li id="n-recentchanges"><a href="/index.php/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-randompage"><a href="/index.php/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
				<li id="n-SphereServer-Forum"><a href="http://www.sphereserver.net">SphereServer Forum</a></li>
				<li id="n-help"><a href="/index.php/Help:Contents" title="The place to find out">Help</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-Setting_Up_Sphere'>
		<h5>Setting Up Sphere</h5>
		<div class='pBody'>
			<ul>
				<li id="n-Where-To-Get-Sphere"><a href="/index.php/Where_to_get_Sphere">Where To Get Sphere</a></li>
				<li id="n-Installing-Sphere"><a href="/index.php/Installing_Sphere">Installing Sphere</a></li>
				<li id="n-Configuring-Sphere.ini"><a href="/index.php/Configuring_Sphere.ini">Configuring Sphere.ini</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-Reference_Compendium'>
		<h5>Reference Compendium</h5>
		<div class='pBody'>
			<ul>
				<li id="n-Definitions"><a href="/index.php/Category:Definitions">Definitions</a></li>
				<li id="n-Objects"><a href="/index.php/Category:Objects">Objects</a></li>
				<li id="n-Scripts"><a href="/index.php/Category:Scripts">Scripts</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-Tutorial_Chapters'>
		<h5>Tutorial Chapters</h5>
		<div class='pBody'>
			<ul>
				<li id="n-Chapter-One"><a href="/index.php/Chapter_1">Chapter One</a></li>
				<li id="n-Chapter-Two"><a href="/index.php/Chapter_2">Chapter Two</a></li>
				<li id="n-Chapter-Three"><a href="/index.php/Chapter_3">Chapter Three</a></li>
				<li id="n-Chapter-Four"><a href="/index.php/Chapter_4">Chapter Four</a></li>
				<li id="n-Chapter-Five"><a href="/index.php/Chapter_5">Chapter Five</a></li>
				<li id="n-Chapter-Six"><a href="/index.php/Chapter_6">Chapter Six</a></li>
				<li id="n-Chapter-Seven"><a href="/index.php/Chapter_7">Chapter Seven</a></li>
				<li id="n-Chapter-Eight"><a href="/index.php/Chapter_8">Chapter Eight</a></li>
				<li id="n-Chapter-Nine"><a href="/index.php/Chapter_9">Chapter Nine</a></li>
				<li id="n-Chapter-Ten"><a href="/index.php/Chapter_10">Chapter Ten</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/index.php/Special:WhatLinksHere/Chapter_8" title="List of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/index.php/Special:RecentChangesLinked/Chapter_8" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-specialpages"><a href="/index.php/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/index.php?title=Chapter_8&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/index.php?title=Chapter_8&amp;oldid=686" title="Permanent link to this version of the page">Permanent link</a></li>			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 26 November 2010, at 16:18.</li>
					<li id="viewcount">This page has been accessed 6,014 times.</li>
					<li id="privacy"><a href="/index.php/SphereWiki:Privacy_policy" title="SphereWiki:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/index.php/SphereWiki:About" title="SphereWiki:About">About SphereWiki</a></li>
					<li id="disclaimer"><a href="/index.php/SphereWiki:General_disclaimer" title="SphereWiki:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Piwik -->
<script type="text/javascript">
var pkBaseURL = (("https:" == document.location.protocol) ? "https://sphere.torfo.org/piwik/" : "http://sphere.torfo.org/piwik/");
document.write(unescape("%3Cscript src='" + pkBaseURL + "piwik.js' type='text/javascript'%3E%3C/script%3E"));
</script><script type="text/javascript">
try {
var piwikTracker = Piwik.getTracker(pkBaseURL + "piwik.php", 4);
piwikTracker.trackPageView();
piwikTracker.enableLinkTracking();
} catch( err ) {}
</script>
<!-- End Piwik Tag -->
<!-- Served in 0.967 secs. --></body></html>
