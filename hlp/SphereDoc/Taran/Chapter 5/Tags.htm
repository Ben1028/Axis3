<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 12 (filtered)">
<title>Tags</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
h2
	{mso-style-link:"Heading 2 Char";
	margin-right:0in;
	margin-left:0in;
	font-size:18.0pt;
	font-family:"Times New Roman","serif";
	font-weight:bold;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"Title Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:15.0pt;
	margin-left:0in;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
tt
	{font-family:"Courier New";}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-weight:bold;}
span.TitleChar
	{mso-style-name:"Title Char";
	mso-style-link:Title;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.msotitlecxspfirst, li.msotitlecxspfirst, div.msotitlecxspfirst
	{mso-style-name:msotitlecxspfirst;
	mso-style-link:"Title Char";
	margin:0in;
	margin-bottom:.0001pt;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.msotitlecxspmiddle, li.msotitlecxspmiddle, div.msotitlecxspmiddle
	{mso-style-name:msotitlecxspmiddle;
	mso-style-link:"Title Char";
	margin:0in;
	margin-bottom:.0001pt;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.msotitlecxsplast, li.msotitlecxsplast, div.msotitlecxsplast
	{mso-style-name:msotitlecxsplast;
	mso-style-link:"Title Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:15.0pt;
	margin-left:0in;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.msochpdefault, li.msochpdefault, div.msochpdefault
	{mso-style-name:msochpdefault;
	margin-right:0in;
	margin-left:0in;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";}
span.mw-headline
	{mso-style-name:mw-headline;}
.MsoChpDefault
	{font-size:10.0pt;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=purple>

<div class=WordSection1>

<div style='border:none;border-bottom:solid #4F81BD 1.0pt;padding:0in 0in 4.0pt 0in'>

<p class=MsoTitle>Tags</p>

</div>

<p class=MsoNormal><span lang=EN>All these things you have learned so far seem
rather restrictive don't you think? Well, I personally don't think they are
very restrictive and I was able to script most things that people are scripting
today in about version .40. But think about it. Items are restricted to MORE,
MORE2, etc. Those poor characters only have PLOT2 to store stuff in before you
have to start resorting to storing information on the variables of their
backpack. </span></p>

<p class=MsoNormal><span lang=EN><br>
So SPHERE developers gave us a long-awaited feature: </span></p>

<p class=MsoNormal><span lang=EN><br>
The TAG. </span></p>

<p class=MsoNormal><span lang=EN><br>
Important TAG principle number one, even before you know how to use them: </span></p>

<p class=MsoNormal><span lang=EN><br>
<b>ALL TAGS ARE STRINGS. PERIOD.</b> </span></p>

<p class=MsoNormal><span lang=EN><br>
They are also just about the simplest part of SPHERE you will ever use. Here is
an example of a tag: </span></p>

<p class=MsoNormal><span lang=EN><br>
</span><span lang=EN style='font-size:10.0pt;font-family:"Courier New";
color:darkblue'>SRC.TAG.JOE = 1</span></p>

<p class=MsoNormal><span lang=EN><br>
What did we just do? We just CREATED a variable on the SRC of this script. This
variable is named TAG.JOE and has a value of 01. (Keep in mind that is the
string 01, not the number 01.) It will be saved with the character and we can
put ANYTHING WE WANT into it. </span></p>

<p class=MsoNormal><span lang=EN><br>
How's that for powerful? </span></p>

<p class=MsoNormal><span lang=EN><br>
Here are some more examples of TAGs: </span></p>

<p class=MsoNormal><span lang=EN><br>
</span><span lang=EN style='font-size:10.0pt;font-family:"Courier New";
color:darkblue'>ON=@DClick</span></p>

<p class=MsoNormal><span lang=EN style='font-size:10.0pt;font-family:"Courier New";
color:darkblue'>SRC.TAG.CLICKS += 1</span></p>

<p class=MsoNormal><span lang=EN style='font-size:10.0pt;font-family:"Courier New";
color:darkblue'>RETURN 1</span></p>

<p class=MsoNormal><span lang=EN style='font-size:10.0pt;font-family:"Courier New";
color:darkblue'><br>
ON=@Equip</span></p>

<p class=MsoNormal><span lang=EN style='font-size:10.0pt;font-family:"Courier New";
color:darkblue'>SRC.TAG.GOOFYTAG = This is a really stupid tag.</span></p>

<p class=MsoNormal><span lang=EN style='font-size:10.0pt;font-family:"Courier New";
color:darkblue'>SRC.SYSMESSAGE &lt;SRC.TAG.GOOFYTAG&gt; // Will see &quot;This
a really stupid tag.&quot;</span></p>

<p class=MsoNormal><span lang=EN style='font-size:10.0pt;font-family:"Courier New";
color:darkblue'>RETURN 0 // Allow them to equip</span></p>

<p class=MsoNormal><span lang=EN style='font-size:10.0pt;font-family:"Courier New";
color:darkblue'><br>
ON=@UnEquip</span></p>

<p class=MsoNormal><span lang=EN style='font-size:10.0pt;font-family:"Courier New";
color:darkblue'>SRC.TAG.GOOFYTAG = // remove the tag</span></p>

<p class=MsoNormal><span lang=EN style='font-size:10.0pt;font-family:"Courier New";
color:darkblue'>RETURN 0 // Allow them to unequip</span></p>

<p class=MsoNormal><span lang=EN><br>
In those three examples, you have the three ways you can use a TAG. </span></p>

<p class=MsoNormal><span lang=EN>A TAG can store a number as in the first
example. Unfortunately, it stores that number as a string, so we must use EVAL
every time we want to use that number. </span></p>

<p class=MsoNormal><span lang=EN>A TAG can store a string, as in the second
example. Actually TAGs always store strings, but this one is obviously a
string. </span></p>

<p class=MsoNormal><span lang=EN>You can delete a TAG. We do this by typing the
name of the tag and then an equal sign with nothing after it. Why would we ever
want to delete a TAG? Well, TAGs, like everything else, use memory. The more
memory you use, the more lag your server has. </span></p>

<p class=MsoNormal><span lang=EN><br>
TAG principle number two: </span></p>

<p class=MsoNormal><span lang=EN><br>
<b>ALWAYS DELETE A TAG YOU ARE FINISHED USING.</b> </span></p>

<p class=MsoNormal><span lang=EN><br>
You may not be finished using a TAG at the end of a script. Or even when the
server shuts down. In fact, there are some TAGs you'll want to stay on the
character forever. However, if you finish using a TAG for any reason, DELETE
IT. It conserves memory and is good scripting practice in general. </span></p>

<p class=MsoNormal><span lang=EN><br>
Here is another important TAG principle. While the TAG is a very powerful
feature, it has its limits. A TAG can ONLY be used on the following objects: </span></p>

<p class=MsoNormal><span lang=EN>Characters. </span></p>

<p class=MsoNormal><span lang=EN>Items. </span></p>

<p class=MsoNormal><span lang=EN>Regions. Yes, regions can have TAGs. </span></p>

<p class=MsoNormal><span lang=EN><br>
It's very hard to give examples of the use of TAGs without going into a complex
system. Most complex systems will use two, three, or more PERMANENT tags. For
example, a system involving experience points might store numbers in
TAG.CURRENT_EXPERIENCE_POINTS and TAG.CURRENT_LEVEL. You'll find a good example
of when to use TAGs to your advantage in chapters from now on, as I present
more and more complex scripts. BTW, when you're dealing with tags, sometimes
you need to check if a tag exists or if it has a value. If it doesn't exist
SPHERE gives a stupid error on the console. To avoid that, we make TAG's
default to 0 by using TAG0 instead of TAG if the tag doesn't exist. If you want
to you can always use TAG0 instead of TAG to be safe. Say you write this line
of code: </span></p>

<p class=MsoNormal><span lang=EN><br>
</span><span lang=EN style='font-size:10.0pt;font-family:"Courier New";
color:darkblue'>MORE = &lt;EVAL &lt;TAG.JOE&gt;&gt;</span></p>

<p class=MsoNormal><span lang=EN><br>
If TAG.JOE contains no value (or hasn't been defined yet), you will get an
error on the console that says something like this: Undefined value ' '. To
complicate matters, the value of MORE will not change, which will severely
screw up your script. To prevent this, use the following method: </span></p>

<p class=MsoNormal><span lang=EN><br>
</span><span lang=EN style='font-size:10.0pt;font-family:"Courier New";
color:darkblue'>MORE = &lt;EVAL &lt;<b>TAG0</b>.JOE&gt;&gt;</span></p>

<p class=MsoNormal><span lang=EN><br>
In this case we have used TAG<b>0</b> to access the TAG value. Accessing the
TAG in this manner will return the value as normal, except for when TAG.JOE is
undefined a &quot;0&quot; will be returned rather than a script error being
raised. </span></p>

<p class=MsoNormal><span lang=EN><br>
The same trick can also be used when setting the value of a TAG. For example: </span></p>

<p class=MsoNormal><span lang=EN><br>
</span><span lang=EN style='font-size:10.0pt;font-family:"Courier New";
color:darkblue'>TAG0.JOE = &lt;MORE&gt;</span></p>

<p class=MsoNormal><span lang=EN><br>
As you may expect, this sets the value of TAG.JOE to whatever value is held in
MORE. The difference however is that because we have used TAG0 when setting the
value, if the value of MORE is zero then TAG.JOE will actually be cleared! This
may initially sound undesirable but it offers the benefit of reducing the
number of TAGs stored on the object. Since we can use TAG0 to retrieve a value
of zero when a tag doesn't exist then you may be wasting memory by storing a
large number of TAGs all with a value of zero. Of course if you do decide to
use TAG0 when setting the value of a TAG then you should ensure that you also
use TAG0 when reading that value back, or else you will quickly run into the
aforementioned &quot;Undefined value&quot; script error. </span></p>

<p class=MsoNormal><span lang=EN>&nbsp;</span></p>

</div>

</body>

</html>
